{"version":3,"sources":["webpack:///./src/app/map/map.module.ts","webpack:///./src/app/map/map.page.html","webpack:///./src/app/map/map.page.scss","webpack:///./src/app/map/map.page.ts"],"names":[],"mappings":"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","file":"map-map-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\nimport { IonicModule } from '@ionic/angular';\nimport { MapPage } from './map.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MapPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes),\n  ],\n  declarations: [MapPage]\n})\nexport class MapPageModule {}\n","module.exports = \"<ion-header>\\r\\n  <ion-toolbar>\\r\\n    <ion-buttons slot=\\\"start\\\">\\r\\n      <ion-menu-button></ion-menu-button>\\r\\n    </ion-buttons>\\r\\n    <ion-title>\\r\\n      Going My Way/RideShare\\r\\n    </ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n  <div id=\\\"center\\\">\\r\\n    <ion-button (click)=\\\"showJournies()\\\" shape=\\\"round\\\" fill=\\\"outline\\\">\\r\\n      <ion-icon slot=\\\"start\\\" name=\\\"locate\\\"></ion-icon>\\r\\n      Show Journies\\r\\n    </ion-button>\\r\\n  </div>\\r\\n  <div id=\\\"myMap\\\"></div>\\r\\n</ion-content>\"","module.exports = \"#myMap {\\n  height: 90%;\\n  margin: 2%;\\n  border-radius: 5%; }\\n\\n#center {\\n  text-align: center;\\n  margin: 3%; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbWFwL0M6XFxVc2Vyc1xcQ29ybWFjXFxEZXNrdG9wXFxQcm9mUHJhY3RpY2VcXEdvaW5nTXlXYXkvc3JjXFxhcHBcXG1hcFxcbWFwLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUVJLFdBQVc7RUFDWCxVQUFTO0VBQ1QsaUJBQWlCLEVBQUE7O0FBRXJCO0VBRUksa0JBQWtCO0VBQ2xCLFVBQVUsRUFBQSIsImZpbGUiOiJzcmMvYXBwL21hcC9tYXAucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiI215TWFwXHJcbntcclxuICAgIGhlaWdodDogOTAlO1xyXG4gICAgbWFyZ2luOjIlO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNSU7XHJcbn1cclxuI2NlbnRlclxyXG57XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBtYXJnaW46IDMlO1xyXG59Il19 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { GoogleMaps, GoogleMap, Marker, LatLng, ILatLng, GoogleMapOptions } from '@ionic-native/google-maps/ngx';\r\nimport { JourneyService } from 'src/app/journey.service';\r\nimport { dbInfo } from 'src/app/Journey';\r\nimport { Observable } from 'rxjs/internal/Observable';\r\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\r\n\r\n@Component({\r\n  selector: 'app-map',\r\n  templateUrl: './map.page.html',\r\n  styleUrls: ['./map.page.scss'],\r\n})\r\nexport class MapPage implements OnInit {\r\n\r\n  check: number;\r\n  //check for a User\r\n  user: any;\r\n\r\n  constructor(private Journey: JourneyService, private geo: Geolocation) { }\r\n\r\n  //A Map for showing the Journeys to a user\r\n  map: GoogleMap;\r\n  //database Journeys\r\n  markersToShow: any[];\r\n\r\n  ngOnInit() {\r\n    //first get the Journey documents from the database\r\n    this.loadDocuments();\r\n    //get the location of the device\r\n    this.findUser();\r\n  }\r\n\r\n  //find the users current position and then pass these into the load map function\r\n  //this will error handle the wait time for getting the users position\r\n  //log an error if neccessary\r\n  findUser() {\r\n    this.geo.getCurrentPosition().then((resp) => {\r\n      this.loadMap(resp.coords.latitude, resp.coords.longitude)\r\n    }).catch((error) => {\r\n      console.log('Error getting location', error);\r\n    });\r\n  }\r\n  //load map waits for the Geolcation of the user and then centers the map on that location\r\n  loadMap(lat: number, lng: number) {\r\n    let mapOptions: GoogleMapOptions = {\r\n      camera: {\r\n        target: {\r\n          lat: lat,\r\n          lng: lng\r\n        },\r\n        zoom: 12,\r\n        tilt: 30\r\n      }\r\n    };\r\n    //create the map for the view\r\n    this.map = GoogleMaps.create('myMap', mapOptions);\r\n  }\r\n\r\n  showJournies() {\r\n    //first check for a user\r\n    if (!this.Journey.getUser()) {\r\n      alert(\"Please Log in to view Journies\")\r\n    }\r\n    //if a valid user is found\r\n    else {\r\n      if (this.markersToShow != null) {\r\n        for (let info of this.markersToShow) {\r\n          //loop through all of the documents from the database\r\n          //and one by one paint the Journeys from the database onto the map for the user\r\n          //by adding the required information from the document into the function to do so\r\n          this.addMarkerFromDatabase(\r\n            info.payload.doc._document.proto.fields.endlat.doubleValue,\r\n            info.payload.doc._document.proto.fields.endlong.doubleValue,\r\n            info.payload.doc._document.proto.fields.startlat.doubleValue,\r\n            info.payload.doc._document.proto.fields.startlong.doubleValue,\r\n            info.payload.doc._document.proto.fields.name.stringValue)\r\n        }\r\n      }\r\n      //if empty\r\n      else {\r\n        alert(\"No Journeys in Database\");\r\n      }\r\n    }\r\n  }\r\n  //add markers from database\r\n  addMarkerFromDatabase(x: number, y: number, x1: number, y1: number, title: string) {\r\n    //initially this get a random vaild RGB colour based on the unique co-ordinates of the Journey\r\n    let r: number = this.convertRgb(x)\r\n    let g: number = this.convertRgb(y)\r\n    let b: number = this.convertRgb(x1)\r\n    //add the markers to the map\r\n    //title is name of the user who added the Journey so the other Users can see who is driving\r\n    let startMarker: Marker = this.map.addMarkerSync(\r\n      {\r\n        title: title,\r\n        icon: 'rgb(' + r + ',' + g + ',' + b + ')',\r\n        animation: 'Drop',\r\n        position:\r\n          {\r\n            lat: x,\r\n            lng: y\r\n          }\r\n      })\r\n    //this allows the title to be viewed\r\n    startMarker.showInfoWindow();\r\n    //add the end point of the journey\r\n    let endMarker: Marker = this.map.addMarkerSync(\r\n      {\r\n        title: title,\r\n        icon: 'rgb(' + r + ',' + g + ',' + b + ')',\r\n        animation: 'Drop',\r\n        position:\r\n          {\r\n            lat: x1,\r\n            lng: y1\r\n          }\r\n      })\r\n    endMarker.showInfoWindow();\r\n    let pointA: ILatLng = startMarker.getPosition();\r\n    let pointB: ILatLng = endMarker.getPosition();\r\n    //add a polyline between these two points to distinguish Journeys on the view\r\n    this.map.addPolyline(\r\n      {\r\n        points: [pointA, pointB]\r\n      }\r\n    )\r\n  }\r\n  //function that returns a valid rgb value based on latlng\r\n  convertRgb(x: number): number {\r\n    //keep in range\r\n    if (x < 0) {\r\n      x = (x * x) + 20\r\n    }\r\n    else {\r\n      x = x + 75\r\n    }\r\n    //keep in range\r\n    if (x >= 255) {\r\n      x -= 100;\r\n    }\r\n    return x;\r\n  }\r\n  //retrieves the information from the database\r\n  //and stores it into an array for manipulation\r\n  loadDocuments() {\r\n    this.Journey.getJourney().subscribe(res => {\r\n      this.markersToShow = res;\r\n    });\r\n  }\r\n}"],"sourceRoot":""}