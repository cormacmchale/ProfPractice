{"version":3,"sources":["webpack:///./src/app/journey-planner/journey-planner.module.ts","webpack:///./src/app/journey-planner/journey-planner.page.html","webpack:///./src/app/journey-planner/journey-planner.page.scss","webpack:///./src/app/journey-planner/journey-planner.page.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAyC;AACM;AACF;AACU;AACV;AACe;AAE5D,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,wEAAkB;KAC9B;CACF,CAAC;AAWF;IAAA;IAAuC,CAAC;IAA3B,wBAAwB;QATpC,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,0DAAW;gBACX,0DAAW;gBACX,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;aAC9B;YACD,YAAY,EAAE,CAAC,wEAAkB,CAAC;SACnC,CAAC;OACW,wBAAwB,CAAG;IAAD,+BAAC;CAAA;AAAH;;;;;;;;;;;;ACvBrC,ygC;;;;;;;;;;;ACAA,0BAA0B,gBAAgB,eAAe,sBAAsB,EAAE,eAAe,wBAAwB,eAAe,iCAAiC,uBAAuB,EAAE,aAAa,uBAAuB,EAAE,iBAAiB,uBAAuB,EAAE,+CAA+C,umC;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACU7R;AACe;AACT;AACgC;AAChB;AAOzD;IAWE,4BAAoB,MAAc,EAAU,cAA8B;QAAtD,WAAM,GAAN,MAAM,CAAQ;QAAU,mBAAc,GAAd,cAAc,CAAgB;IAAI,CAAC;IAE/E,qCAAQ,GAAR;QACE,8DAA8D;QAC9D,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,kGAAkG;IAClG,oCAAO,GAAP;QACE,IAAI,UAAU,GAAqB;YACjC,MAAM,EAAE;gBACN,MAAM,EAAE;oBACN,GAAG,EAAE,SAAS;oBACd,GAAG,EAAE,CAAC,QAAQ;iBACf;gBACD,IAAI,EAAE,CAAC;gBACP,IAAI,EAAE,EAAE;aACT;SACF,CAAC;QACF,IAAI,CAAC,GAAG,GAAG,oEAAU,CAAC,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;IACpD,CAAC;IAGD,mCAAM,GAAN,UAAO,QAAgB;QAAvB,iBA6BC;QA5BC,0EAA0E;QAC1E,iEAAiE;QACjE,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;QAEjB,8FAA8F;QAC9F,gDAAgD;QAChD,iFAAiF;QACjF,sEAAQ,CAAC,OAAO,CACb;YACC,SAAS,EAAE,QAAQ;SACpB,CAAC;aACD,IAAI,CAAC,UAAC,OAAyB;YAC9B,KAAI,CAAC,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;YAC9C,KAAI,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;YAC3B,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,GAAG,CAAC,aAAa,CAAC;gBACvC,KAAK,EAAE,aAAa;gBACpB,IAAI,EAAE,KAAK;gBACX,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ;gBAC7B,SAAS,EAAE,IAAI;aAChB,CAAC,CAAC;YAEH,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,GAAG,CAAC,aAAa,CAAC;gBACzC,KAAK,EAAE,eAAe;gBACtB,IAAI,EAAE,MAAM;gBACZ,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ;gBAC7B,SAAS,EAAE,IAAI;aAChB,CAAC,CAAC;QACL,CAAC,CAAC;IACN,CAAC;IACD,uEAAuE;IACvE,qFAAqF;IACrF,iDAAoB,GAApB;QACE,uCAAuC;QACvC,sEAAsE;QACtE,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,EAAE;YAClC,KAAK,CAAC,gCAAgC,CAAC;SACxC;aACI;YACH,uFAAuF;YACvF,IAAI,IAAI,GAAQ,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;YAC9C,IAAI,QAAQ,GAAW,IAAI,CAAC,KAAK;YACjC,mFAAmF;YACnF,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;YAC7C,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;YACzC,8FAA8F;YAC9F,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC;SACjG;IACH,CAAC;IACD,+DAA+D;IAC/D,kEAAkE;IAClE,kDAAqB,GAArB,UAAsB,CAAS,EAAE,CAAS,EAAE,EAAU,EAAE,EAAU,EAAE,IAAY;QAAhF,iBAmBC;QAlBC,IAAI,cAAc,GAAW,IAAI;QACjC,IAAI,YAAsB;QAC1B,sEAAQ,CAAC,OAAO,CACb;YACC,QAAQ,EACN;gBACE,KAAK,EAAE,CAAC;gBACR,KAAK,EAAE,CAAC;aACT;YACH,qFAAqF;SACtF,CAAC,CAAC,IAAI,CAAC,UAAC,OAAyB;YAChC,YAAY,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK;YACrC,cAAc;gBACZ,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,YAAY,CAAC,CAAC,CAAC;sBAC/D,IAAI,GAAG,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,YAAY,CAAC,CAAC,CAAC;YACnD,wDAAwD;YACxD,KAAI,CAAC,2BAA2B,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,cAAc,CAAC;QACtE,CAAC,CAAC;IACN,CAAC;IACD,gFAAgF;IAChF,wDAA2B,GAA3B,UAA4B,CAAS,EAAE,CAAS,EAAE,EAAU,EAAE,EAAU,EAAE,IAAY,EAAE,QAAgB;QAAxG,iBAiBC;QAhBC,IAAI,cAAc,GAAW,IAAI;QACjC,IAAI,YAAsB,CAAC;QAC3B,sEAAQ,CAAC,OAAO,CACb;YACC,QAAQ,EACN;gBACE,KAAK,EAAE,EAAE;gBACT,KAAK,EAAE,EAAE;aACV;SACJ,CAAC,CAAC,IAAI,CAAC,UAAC,OAAyB;YAChC,YAAY,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK;YACrC,cAAc;gBACZ,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,YAAY,CAAC,CAAC,CAAC;sBAC/D,IAAI,GAAG,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,YAAY,CAAC,CAAC,CAAC;YACnD,KAAI,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,cAAc,CAAC;QAClE,CAAC,CAAC;IACN,CAAC;IACD,2GAA2G;IAC3G,mFAAmF;IACnF,0CAAa,GAAb,UAAc,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,IAAY,EAAE,QAAgB,EAAE,MAAc;QAC1G,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;QACxE,gDAAgD;QAChD,KAAK,CAAC,gBAAgB,CAAC;QACvB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;IACjC,CAAC;IAnIU,kBAAkB;QAL9B,+DAAS,CAAC;YACT,QAAQ,EAAE,qBAAqB;YAC/B,uHAA0C;;SAE3C,CAAC;yCAY4B,sDAAM,EAA0B,sEAAc;OAX/D,kBAAkB,CAoI9B;IAAD,yBAAC;CAAA;AApI8B","file":"journey-planner-journey-planner-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { JourneyPlannerPage } from './journey-planner.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: JourneyPlannerPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  declarations: [JourneyPlannerPage]\r\n})\r\nexport class JourneyPlannerPageModule {}\r\n","module.exports = \"<ion-header>\\r\\n  <ion-toolbar>\\r\\n    <ion-buttons slot=\\\"start\\\">\\r\\n      <ion-menu-button></ion-menu-button>\\r\\n    </ion-buttons>\\r\\n    <ion-title>\\r\\n      Going My Way/RideShare\\r\\n    </ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n  <div id=\\\"location\\\">\\r\\n    <ion-input [(ngModel)]=\\\"search_address\\\" placeholder=\\\"Search location:\\\"></ion-input>\\r\\n  </div>\\r\\n  <ion-grid>\\r\\n    <ion-row>\\r\\n      <ion-col>\\r\\n        <div id=\\\"search\\\">\\r\\n          <ion-button (click)=\\\"search(search_address)\\\" shape=\\\"round\\\" fill=\\\"outline\\\">search</ion-button>\\r\\n        </div>\\r\\n      </ion-col>\\r\\n      <ion-col>\\r\\n        <div id=\\\"addJourney\\\">\\r\\n          <ion-button (click)=\\\"addJourneyToDatabase()\\\" shape=\\\"round\\\" fill=\\\"outline\\\">\\r\\n            <ion-icon slot=\\\"start\\\" name=\\\"locate\\\"></ion-icon>\\r\\n            Add\\r\\n          </ion-button>\\r\\n        </div>\\r\\n      </ion-col>\\r\\n    </ion-row>\\r\\n  </ion-grid>\\r\\n  <div id=\\\"myMap\\\"></div>\\r\\n</ion-content>\"","module.exports = \"#myMap {\\n  height: 90%;\\n  margin: 2%;\\n  border-radius: 5%; }\\n\\n#location {\\n  border-radius: 30px;\\n  margin: 2%;\\n  border: 1px solid dodgerblue;\\n  text-align: center; }\\n\\n#search {\\n  text-align: center; }\\n\\n#addJourney {\\n  text-align: center; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvam91cm5leS1wbGFubmVyL0M6XFxVc2Vyc1xcQ29ybWFjXFxEZXNrdG9wXFxQcm9mUHJhY3RpY2VcXEdvaW5nTXlXYXkvc3JjXFxhcHBcXGpvdXJuZXktcGxhbm5lclxcam91cm5leS1wbGFubmVyLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQTtFQUVJLFdBQVc7RUFDWCxVQUFTO0VBQ1QsaUJBQWlCLEVBQUE7O0FBRXJCO0VBRUksbUJBQW1CO0VBQ25CLFVBQVU7RUFDViw0QkFBNEI7RUFDNUIsa0JBQWtCLEVBQUE7O0FBRXRCO0VBRUksa0JBQWtCLEVBQUE7O0FBR3RCO0VBRUksa0JBQWtCLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9qb3VybmV5LXBsYW5uZXIvam91cm5leS1wbGFubmVyLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi8vbWFyZ2lucyBmb3IgdGhlIGdvb2dsZSBtYXAgdGhhdCBhcHBlYXJzIHdoZW4geW91IFxyXG4vL2FjY2VzcyB0aGUgdmlld1xyXG4jbXlNYXBcclxue1xyXG4gICAgaGVpZ2h0OiA5MCU7XHJcbiAgICBtYXJnaW46MiU7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1JTtcclxufVxyXG4jbG9jYXRpb24gXHJcbnsgIFxyXG4gICAgYm9yZGVyLXJhZGl1czogMzBweDtcclxuICAgIG1hcmdpbjogMiU7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCBkb2RnZXJibHVlO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcbiNzZWFyY2ggXHJcbnsgICAgIFxyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgXHJcbn1cclxuI2FkZEpvdXJuZXkgXHJcbnsgICAgIFxyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcbiAgXHJcbiAgIl19 */\"","import {\r\n  GoogleMaps,\r\n  GoogleMap,\r\n  GoogleMapsEvent,\r\n  GoogleMapOptions,\r\n  CameraPosition,\r\n  MarkerOptions,\r\n  Marker,\r\n  Environment,\r\n  ILatLng\r\n} from '@ionic-native/google-maps';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Geocoder, GeocoderResult } from '@ionic-native/google-maps/ngx';\r\nimport { JourneyService } from 'src/app/journey.service';\r\n\r\n@Component({\r\n  selector: 'app-journey-planner',\r\n  templateUrl: './journey-planner.page.html',\r\n  styleUrls: ['./journey-planner.page.scss'],\r\n})\r\nexport class JourneyPlannerPage implements OnInit {\r\n\r\n  //imports for planning a Journey and sending it to the database\r\n  //the map will be displayed for the user who can drag markers to start and end point\r\n  map: GoogleMap;\r\n  startJourney: Marker;\r\n  endJourney: Marker;\r\n  //these will be the values that will be sent to that database as a document\r\n  start: ILatLng;\r\n  end: ILatLng;\r\n\r\n  constructor(private router: Router, private journeyService: JourneyService) { }\r\n\r\n  ngOnInit() {\r\n    //first thing the page must do is load the app in for the User\r\n    this.loadMap();\r\n  }\r\n\r\n  //loads the Google map above ireland - will be changes in future builds for improved functionality\r\n  loadMap() {\r\n    let mapOptions: GoogleMapOptions = {\r\n      camera: {\r\n        target: {\r\n          lat: 53.270962,\r\n          lng: -9.062691\r\n        },\r\n        zoom: 5,\r\n        tilt: 30\r\n      }\r\n    };\r\n    this.map = GoogleMaps.create('myMap', mapOptions);\r\n  }\r\n\r\n\r\n  search(location: string) {\r\n    //clear the markers from the Map if the user decides to do a second search\r\n    //so as not to confuse the data that will be sent to the database\r\n    this.map.clear();\r\n\r\n    //the location typed in by the User is converted to latlng co-ordinates by the Geocoder Object\r\n    //the map is then sent to focus on this location\r\n    //the user is then given two markers to drag to a start location and end location\r\n    Geocoder.geocode\r\n      ({\r\n        \"address\": location\r\n      })\r\n      .then((results: GeocoderResult[]) => {\r\n        this.map.setCameraTarget(results[0].position);\r\n        this.map.setCameraZoom(10);\r\n        this.endJourney = this.map.addMarkerSync({\r\n          title: \"End Journey\",\r\n          icon: 'Red',\r\n          position: results[0].position,\r\n          draggable: true,\r\n        });\r\n\r\n        this.startJourney = this.map.addMarkerSync({\r\n          title: \"Start Journey\",\r\n          icon: 'Blue',\r\n          position: results[0].position,\r\n          draggable: true,\r\n        });\r\n      })\r\n  }\r\n  //this is the beginning of the largest set of function calls in the app\r\n  //its setup in a cascading way as to handle the asynchrounous nature of the Geocoding\r\n  addJourneyToDatabase() {\r\n    //first check that someone is logged in\r\n    //if not found then alert the User as a user is required for a Journey\r\n    if (!this.journeyService.getUser()) {\r\n      alert(\"Please Log in to add a Journey\")\r\n    }\r\n    else {\r\n      //first gather the required information from the user that is logged on from the device\r\n      let user: any = this.journeyService.getUser();\r\n      let userName: string = user.email\r\n      //get the positions of where they have dragged the start and end of journey markers\r\n      this.start = this.startJourney.getPosition();\r\n      this.end = this.endJourney.getPosition();\r\n      //all this information is passed here for formatting to be sent to that database as a document\r\n      this.getJourneyInformation(this.start.lat, this.start.lng, this.end.lat, this.end.lng, userName)\r\n    }\r\n  }\r\n  //this function reverse Geocodes a latlng for the start address\r\n  //this information is used to delete a Journey in the databasePage\r\n  getJourneyInformation(x: number, y: number, x2: number, y2: number, user: string) {\r\n    let waitForAddress: string = null\r\n    let checkAddress: string[]\r\n    Geocoder.geocode\r\n      ({\r\n        position:\r\n          {\r\n            \"lat\": x,\r\n            \"lng\": y\r\n          }\r\n        //this is asynchronous so all of the information must be handled here for consistancy\r\n      }).then((results: GeocoderResult[]) => {\r\n        checkAddress = results[0].extra.lines\r\n        waitForAddress =\r\n          checkAddress[0] + \", \" + checkAddress[1] + \", \" + checkAddress[2]\r\n          + \", \" + checkAddress[3] + \", \" + checkAddress[4]\r\n        //the same logic is then used to geocode the end address\r\n        this.finishGetJourneyInformation(x, y, x2, y2, user, waitForAddress)\r\n      })\r\n  }\r\n  //the same as the above function for the other street addess of the end loaction\r\n  finishGetJourneyInformation(x: number, y: number, x2: number, y2: number, user: string, startLoc: string) {\r\n    let waitForAddress: string = null\r\n    let checkAddress: string[];\r\n    Geocoder.geocode\r\n      ({\r\n        position:\r\n          {\r\n            \"lat\": x2,\r\n            \"lng\": y2\r\n          }\r\n      }).then((results: GeocoderResult[]) => {\r\n        checkAddress = results[0].extra.lines\r\n        waitForAddress =\r\n          checkAddress[0] + \", \" + checkAddress[1] + \", \" + checkAddress[2]\r\n          + \", \" + checkAddress[3] + \", \" + checkAddress[4]\r\n        this.addToDataBase(y, x, y2, x2, user, startLoc, waitForAddress)\r\n      })\r\n  }\r\n  //finally after the street addresses have been obtained from the co-ordinates of where the markers are then\r\n  //send all of the information to the service to be stored on firebase as a document\r\n  addToDataBase(x1: number, y1: number, x2: number, y2: number, user: string, startLoc: string, endLoc: string) {\r\n    this.journeyService.sendJourney(x1, y1, x2, y2, user, startLoc, endLoc);\r\n    //alert the user and return them to the homepage\r\n    alert(\"Journey added!\")\r\n    this.router.navigate(['home']);\r\n  }\r\n}"],"sourceRoot":""}