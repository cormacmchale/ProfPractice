{"version":3,"sources":["webpack:///./node_modules/@ionic-native/google-maps/index.js","webpack:///./src/app/journey-planner/journey-planner.module.ts","webpack:///./src/app/journey-planner/journey-planner.page.html","webpack:///./src/app/journey-planner/journey-planner.page.scss","webpack:///./src/app/journey-planner/journey-planner.page.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAiB,SAAI,IAAI,SAAI;AAC7B;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD,YAAY,SAAI;AACuJ;AACrI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACiB;AAClB;AACA;AACA;AACA;AACA,mDAAmD,QAAQ,0EAAe,oBAAoB,eAAe,aAAa;AAC1H,8DAA8D,QAAQ,0EAAe,sBAAsB,eAAe,aAAa;AACvI,uDAAuD,QAAQ,0EAAe,kBAAkB,eAAe,aAAa;AAC5H,yDAAyD,QAAQ,0EAAe,oBAAoB,eAAe,aAAa;AAChI,oDAAoD,QAAQ,0EAAe,qBAAqB,eAAe,aAAa;AAC5H;AACA,0BAA0B,QAAQ,8EAAmB,oBAAoB,EAAE;AAC3E,+BAA+B,CAAC,8EAAmB,2BAA2B,EAAE;AAChF;AACA;AACA,KAAK;AACL;AACA,0BAA0B,QAAQ,8EAAmB,oBAAoB,EAAE;AAC3E,+BAA+B,CAAC,8EAAmB,2BAA2B,EAAE;AAChF;AACA;AACA,KAAK;AACL;AACA,0BAA0B,QAAQ,8EAAmB,eAAe,EAAE;AACtE,+BAA+B,CAAC,8EAAmB,sBAAsB,EAAE;AAC3E;AACA;AACA,KAAK;AACL;AACA,CAAC;AACuB;AACxB;AACA;AACA;AACA;AACA,oDAAoD,QAAQ,0EAAe,oBAAoB,eAAe,aAAa;AAC3H,+DAA+D,QAAQ,0EAAe,sBAAsB,eAAe,aAAa;AACxI,0DAA0D,QAAQ,0EAAe,oBAAoB,eAAe,aAAa;AACjI;AACA,0BAA0B,QAAQ,8EAAmB,oBAAoB,EAAE;AAC3E,+BAA+B,CAAC,8EAAmB,2BAA2B,EAAE;AAChF;AACA;AACA,KAAK;AACL;AACA,0BAA0B,QAAQ,8EAAmB,oBAAoB,EAAE;AAC3E,+BAA+B,CAAC,8EAAmB,2BAA2B,EAAE;AAChF;AACA;AACA,KAAK;AACL;AACA,0BAA0B,QAAQ,8EAAmB,kBAAkB,EAAE;AACzE,+BAA+B,CAAC,8EAAmB,yBAAyB,EAAE;AAC9E;AACA;AACA,KAAK;AACL;AACA,0BAA0B,QAAQ,8EAAmB,mBAAmB,EAAE;AAC1E,+BAA+B,CAAC,8EAAmB,0BAA0B,EAAE;AAC/E;AACA;AACA,KAAK;AACL;AACA,0BAA0B,QAAQ,8EAAmB,mBAAmB,EAAE;AAC1E,+BAA+B,CAAC,8EAAmB,0BAA0B,EAAE;AAC/E;AACA;AACA,KAAK;AACL;AACA,0BAA0B,QAAQ,8EAAmB,oBAAoB,EAAE;AAC3E,+BAA+B,CAAC,8EAAmB,2BAA2B,EAAE;AAChF;AACA;AACA,KAAK;AACL;AACA,0BAA0B,QAAQ,8EAAmB,eAAe,EAAE;AACtE,+BAA+B,CAAC,8EAAmB,sBAAsB,EAAE;AAC3E;AACA;AACA,KAAK;AACL;AACA,CAAC;AACwB;AACzB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C,uBAAuB,iBAAiB;AACxC,gBAAgB;AAChB;AACA;AACA,YAAY,4EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C,uBAAuB,kBAAkB;AACzC,gBAAgB;AAChB;AACA;AACA,YAAY,4EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,oEAAiB;AACG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+EAAoB;AACpC,2BAA2B,+CAAU;AACrC;AACA;AACA,wCAAwC,uBAAuB;AAC/D;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,+EAAoB;AACpC,uBAAuB,qEAAU;AACjC;AACA;AACA,wCAAwC,uBAAuB;AAC/D;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,+EAAoB;AACpC;AACA;AACA;AACA,SAAS;AACT;AACA,8CAA8C,QAAQ,0EAAe,eAAe,eAAe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AAa;AACrI,iDAAiD,QAAQ,0EAAe,wBAAwB,eAAe,aAAa;AAC5H,oDAAoD,QAAQ,0EAAe,qBAAqB,eAAe,aAAa;AAC5H,8CAA8C,QAAQ,0EAAe,qBAAqB,eAAe,aAAa;AACtH,2CAA2C,QAAQ,0EAAe,mBAAmB,aAAa;AAClG,8CAA8C,QAAQ,0EAAe,qBAAqB,eAAe,aAAa;AACtH,sDAAsD,QAAQ,0EAAe,sBAAsB,eAAe,aAAa;AAC/H,+CAA+C,QAAQ,0EAAe,sBAAsB,eAAe,aAAa;AACxH;AACA,CAAC;AACiB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,YAAY,4EAAiB;AAC7B;AACA;AACA,eAAe,qEAAU;AACzB,+EAA+E,sBAAsB,EAAE;AACvG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACsB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B,gBAAgB;AAChB;AACA;AACA,YAAY,4EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,qEAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,qEAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACmB;AACpB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,YAAY,4EAAiB;AAC7B;AACA;AACA,eAAe,qEAAU;AACzB;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,YAAY,4EAAiB;AAC7B;AACA;AACA,eAAe,qEAAU;AACzB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC0B;AAC3B;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B,0BAA0B,OAAO;AACjC,gBAAgB;AAChB;AACA;AACA,YAAY,4EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oCAAoC;AACxD,gBAAgB;AAChB;AACA;AACA,YAAY,4EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACmB;AACpB;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,oBAAoB;AACpB,gBAAgB;AAChB;AACA;AACA,YAAY,4EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,oBAAoB;AACpB,gBAAgB;AAChB;AACA;AACA,YAAY,4EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACe;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,yBAAyB;AACzB,gBAAgB;AAChB;AACA;AACA,YAAY,4EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,wBAAwB;AACxB,uBAAuB;AACvB,gBAAgB;AAChB;AACA;AACA,YAAY,4EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,QAAQ;AAC1B,wBAAwB,OAAO;AAC/B,uBAAuB,OAAO;AAC9B,gBAAgB;AAChB;AACA;AACA,YAAY,4EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,gBAAgB;AAChB;AACA;AACA,YAAY,4EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oCAAoC;AACxD,gBAAgB;AAChB;AACA;AACA,YAAY,4EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oCAAoC;AACxD,gBAAgB;AAChB;AACA;AACA,YAAY,4EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,kBAAkB;AAClB,gBAAgB;AAChB;AACA;AACA,YAAY,4EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B,kBAAkB,QAAQ;AAC1B,wBAAwB,OAAO;AAC/B,gBAAgB;AAChB;AACA;AACA,YAAY,4EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACoB;AACrB;AACA;AACA;AACA;AACA,YAAY,4EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,qEAAU;AAClG;AACA;AACA;AACA;AACA;AACA,mCAAmC,0CAA0C;AAC7E;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;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AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,+EAAoB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,+EAAoB;AACpC,uBAAuB,qEAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,+EAAoB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,+EAAoB;AACpC,uBAAuB,qEAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,+EAAoB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,+EAAoB;AACpC,uBAAuB,qEAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,+EAAoB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,+EAAoB;AACpC,uBAAuB,qEAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AAC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","file":"journey-planner-journey-planner-module.js","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar _this = this;\nimport { IonicNativePlugin, instanceAvailability, cordovaInstance, instancePropertyGet, instancePropertySet, checkAvailability, getPromise } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nvar TARGET_ELEMENT_FINDING_QUERYS = [\n    'ion-router-outlet #',\n    '.show-page #',\n];\nvar LatLng = /** @class */ (function () {\n    function LatLng(lat, lng) {\n        this.lat = lat;\n        this.lng = lng;\n    }\n    LatLng.prototype.equals = function (other) {\n        return this.lat === other.lat && this.lng === other.lng;\n    };\n    LatLng.prototype.toString = function () {\n        return this.lat + ',' + this.lng;\n    };\n    LatLng.prototype.toUrlValue = function (precision) {\n        precision = precision || 6;\n        return this.lat.toFixed(precision) + ',' + this.lng.toFixed(precision);\n    };\n    return LatLng;\n}());\nexport { LatLng };\nvar LatLngBounds = /** @class */ (function () {\n    function LatLngBounds(points) {\n        this._objectInstance = new (GoogleMaps.getPlugin()).LatLngBounds(points);\n    }\n    LatLngBounds.prototype.toString = function () { return cordovaInstance(this, \"toString\", { \"sync\": true }, arguments); };\n    LatLngBounds.prototype.toUrlValue = function (precision) { return cordovaInstance(this, \"toUrlValue\", { \"sync\": true }, arguments); };\n    LatLngBounds.prototype.extend = function (LatLng) { return cordovaInstance(this, \"extend\", { \"sync\": true }, arguments); };\n    LatLngBounds.prototype.contains = function (LatLng) { return cordovaInstance(this, \"contains\", { \"sync\": true }, arguments); };\n    LatLngBounds.prototype.getCenter = function () { return cordovaInstance(this, \"getCenter\", { \"sync\": true }, arguments); };\n    Object.defineProperty(LatLngBounds.prototype, \"northeast\", {\n        get: function () { return instancePropertyGet(this, \"northeast\"); },\n        set: function (value) { instancePropertySet(this, \"northeast\", value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LatLngBounds.prototype, \"southwest\", {\n        get: function () { return instancePropertyGet(this, \"southwest\"); },\n        set: function (value) { instancePropertySet(this, \"southwest\", value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LatLngBounds.prototype, \"type\", {\n        get: function () { return instancePropertyGet(this, \"type\"); },\n        set: function (value) { instancePropertySet(this, \"type\", value); },\n        enumerable: true,\n        configurable: true\n    });\n    return LatLngBounds;\n}());\nexport { LatLngBounds };\nvar VisibleRegion = /** @class */ (function () {\n    function VisibleRegion(southwest, northeast, farLeft, farRight, nearLeft, nearRight) {\n        this._objectInstance = new (GoogleMaps.getPlugin()).VisibleRegion(southwest, northeast, farLeft, farRight, nearLeft, nearRight);\n    }\n    VisibleRegion.prototype.toString = function () { return cordovaInstance(this, \"toString\", { \"sync\": true }, arguments); };\n    VisibleRegion.prototype.toUrlValue = function (precision) { return cordovaInstance(this, \"toUrlValue\", { \"sync\": true }, arguments); };\n    VisibleRegion.prototype.contains = function (LatLng) { return cordovaInstance(this, \"contains\", { \"sync\": true }, arguments); };\n    Object.defineProperty(VisibleRegion.prototype, \"northeast\", {\n        get: function () { return instancePropertyGet(this, \"northeast\"); },\n        set: function (value) { instancePropertySet(this, \"northeast\", value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VisibleRegion.prototype, \"southwest\", {\n        get: function () { return instancePropertyGet(this, \"southwest\"); },\n        set: function (value) { instancePropertySet(this, \"southwest\", value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VisibleRegion.prototype, \"farLeft\", {\n        get: function () { return instancePropertyGet(this, \"farLeft\"); },\n        set: function (value) { instancePropertySet(this, \"farLeft\", value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VisibleRegion.prototype, \"farRight\", {\n        get: function () { return instancePropertyGet(this, \"farRight\"); },\n        set: function (value) { instancePropertySet(this, \"farRight\", value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VisibleRegion.prototype, \"nearLeft\", {\n        get: function () { return instancePropertyGet(this, \"nearLeft\"); },\n        set: function (value) { instancePropertySet(this, \"nearLeft\", value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VisibleRegion.prototype, \"nearRight\", {\n        get: function () { return instancePropertyGet(this, \"nearRight\"); },\n        set: function (value) { instancePropertySet(this, \"nearRight\", value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VisibleRegion.prototype, \"type\", {\n        get: function () { return instancePropertyGet(this, \"type\"); },\n        set: function (value) { instancePropertySet(this, \"type\", value); },\n        enumerable: true,\n        configurable: true\n    });\n    return VisibleRegion;\n}());\nexport { VisibleRegion };\n/**\n * @hidden\n */\nexport var StreetViewSource = {\n    DEFAULT: 'DEFAULT',\n    OUTDOOR: 'OUTDOOR'\n};\n/**\n * @hidden\n * You can listen to these events where appropriate\n */\nexport var GoogleMapsEvent = {\n    MAP_READY: 'map_ready',\n    MAP_CLICK: 'map_click',\n    MAP_LONG_CLICK: 'map_long_click',\n    POI_CLICK: 'poi_click',\n    MY_LOCATION_CLICK: 'my_location_click',\n    MY_LOCATION_BUTTON_CLICK: 'my_location_button_click',\n    INDOOR_BUILDING_FOCUSED: 'indoor_building_focused',\n    INDOOR_LEVEL_ACTIVATED: 'indoor_level_activated',\n    CAMERA_MOVE_START: 'camera_move_start',\n    CAMERA_MOVE: 'camera_move',\n    CAMERA_MOVE_END: 'camera_move_end',\n    OVERLAY_CLICK: 'overlay_click',\n    POLYGON_CLICK: 'polygon_click',\n    POLYLINE_CLICK: 'polyline_click',\n    CIRCLE_CLICK: 'circle_click',\n    GROUND_OVERLAY_CLICK: 'groundoverlay_click',\n    INFO_CLICK: 'info_click',\n    INFO_LONG_CLICK: 'info_long_click',\n    INFO_CLOSE: 'info_close',\n    INFO_OPEN: 'info_open',\n    MARKER_CLICK: 'marker_click',\n    MARKER_DRAG: 'marker_drag',\n    MARKER_DRAG_START: 'marker_drag_start',\n    MARKER_DRAG_END: 'marker_drag_end',\n    MAP_DRAG: 'map_drag',\n    MAP_DRAG_START: 'map_drag_start',\n    MAP_DRAG_END: 'map_drag_end',\n    KML_CLICK: 'kml_click',\n    PANORAMA_READY: 'panorama_ready',\n    PANORAMA_CAMERA_CHANGE: 'panorama_camera_change',\n    PANORAMA_LOCATION_CHANGE: 'panorama_location_change',\n    PANORAMA_CLICK: 'panorama_click'\n};\n/**\n * @hidden\n */\nexport var GoogleMapsAnimation = {\n    BOUNCE: 'BOUNCE',\n    DROP: 'DROP'\n};\n/**\n * @hidden\n */\nexport var GoogleMapsMapTypeId = {\n    NORMAL: 'MAP_TYPE_NORMAL',\n    ROADMAP: 'MAP_TYPE_NORMAL',\n    SATELLITE: 'MAP_TYPE_SATELLITE',\n    HYBRID: 'MAP_TYPE_HYBRID',\n    TERRAIN: 'MAP_TYPE_TERRAIN',\n    NONE: 'MAP_TYPE_NONE'\n};\nvar GoogleMaps = /** @class */ (function (_super) {\n    __extends(GoogleMaps, _super);\n    function GoogleMaps() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Creates a new GoogleMap instance\n     * @param element {string | HTMLElement} Element ID or reference to attach the map to\n     * @param options {GoogleMapOptions} [options] Options\n     * @return {GoogleMap}\n     */\n    GoogleMaps.create = function (element, options) {\n        if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === true) {\n            if (element instanceof HTMLElement) {\n                if (!element.offsetParent) {\n                    throw new Error('Element must be under <body>');\n                }\n                if (element.getAttribute('__pluginMapId')) {\n                    throw new Error(element.tagName + \"[__pluginMapId='\" + element.getAttribute('__pluginMapId') + \"'] has already map.\");\n                }\n            }\n            else if (typeof element === 'object') {\n                options = element;\n                element = null;\n            }\n            var googleMap = new GoogleMap(element, options);\n            googleMap.set('_overlays', {});\n            return googleMap;\n        }\n        else {\n            var errorMessage = [\n                '[GoogleMaps]'\n            ];\n            if (!window.cordova) {\n                errorMessage.push('You need to execute \"$> ionic cordova run browser\".');\n                errorMessage.push('\"$> ionic serve\" is not supported.');\n            }\n            else {\n                errorMessage.push('cordova-plugin-googlemaps is not installed or not ready yet.');\n            }\n            if (element instanceof HTMLElement) {\n                displayErrorMessage(element, errorMessage.join('<br />'));\n            }\n            else if (typeof element === 'string') {\n                var targets = Array.from(document.querySelectorAll('#' + element));\n                if (targets.length > 0) {\n                    targets = targets.filter(function (target) {\n                        return !target.hasAttribute('__pluginmapid');\n                    });\n                }\n                if (targets.length === 1 && targets[0]) {\n                    displayErrorMessage(targets[0], errorMessage.join('<br />'));\n                }\n            }\n            throw new Error(errorMessage.join(''));\n        }\n    };\n    /**\n     * Creates a new StreetView instance\n     * @param element {string | HTMLElement} Element ID or reference to attach the map to\n     * @param options {StreetViewOptions} [options] Options\n     * @return {StreetViewPanorama}\n     */\n    GoogleMaps.createPanorama = function (element, options) {\n        if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === true) {\n            if (element instanceof HTMLElement) {\n                if (!element.offsetParent) {\n                    throw new Error('Element must be under <body>');\n                }\n                if (element.getAttribute('__pluginMapId')) {\n                    throw new Error(element.tagName + \"[__pluginMapId='\" + element.getAttribute('__pluginMapId') + \"'] has already map.\");\n                }\n            }\n            return new StreetViewPanorama(element, options);\n        }\n        else {\n            var errorMessage = [\n                '[GoogleMaps]'\n            ];\n            if (!window.cordova) {\n                errorMessage.push('You need to execute \"$> ionic cordova run browser\".');\n                errorMessage.push('\"$> ionic serve\" is not supported.');\n            }\n            else {\n                errorMessage.push('cordova-plugin-googlemaps is not installed or not ready yet.');\n            }\n            if (element instanceof HTMLElement) {\n                displayErrorMessage(element, errorMessage.join('<br />'));\n            }\n            else if (typeof element === 'string') {\n                var targets = Array.from(document.querySelectorAll('#' + element));\n                if (targets.length > 0) {\n                    targets = targets.filter(function (target) {\n                        return !target.hasAttribute('__pluginmapid');\n                    });\n                }\n                if (targets.length === 1 && targets[0]) {\n                    displayErrorMessage(targets[0], errorMessage.join('<br />'));\n                }\n            }\n            throw new Error(errorMessage.join(''));\n        }\n    };\n    GoogleMaps.pluginName = \"GoogleMaps\";\n    GoogleMaps.pluginRef = \"plugin.google.maps\";\n    GoogleMaps.plugin = \"cordova-plugin-googlemaps\";\n    GoogleMaps.repo = \"https://github.com/mapsplugin/cordova-plugin-googlemaps\";\n    GoogleMaps.document = \"https://ionicframework.com/docs/native/google-maps/\";\n    GoogleMaps.install = \"ionic cordova plugin add cordova-plugin-googlemaps --variable API_KEY_FOR_ANDROID=\\\"YOUR_ANDROID_API_KEY_IS_HERE\\\" --variable API_KEY_FOR_IOS=\\\"YOUR_IOS_API_KEY_IS_HERE\\\"\";\n    GoogleMaps.installVariables = [\"API_KEY_FOR_ANDROID\", \"API_KEY_FOR_IOS\"];\n    GoogleMaps.platforms = [\"Android\", \"iOS\", \"Browser\"];\n    return GoogleMaps;\n}(IonicNativePlugin));\nexport { GoogleMaps };\nvar displayErrorMessage = function (element, message) {\n    var errorDiv = document.createElement('div');\n    errorDiv.innerHTML = message;\n    errorDiv.style.color = 'red';\n    errorDiv.style.position = 'absolute';\n    errorDiv.style.width = '80%';\n    errorDiv.style.height = '50%';\n    errorDiv.style.top = '0px';\n    errorDiv.style.bottom = '0px';\n    errorDiv.style.right = '0px';\n    errorDiv.style.left = '0px';\n    errorDiv.style.padding = '0px';\n    errorDiv.style.margin = 'auto';\n    element.style.position = 'relative';\n    element.style.backgroundColor = '#ccc7';\n    element.appendChild(errorDiv);\n};\nvar normalizeArgumentsOfEventListener = function (_objectInstance, args) {\n    if (args[args.length - 1] instanceof GoogleMaps.getPlugin().BaseClass) {\n        if (args[args.length - 1].type === 'Map' || args[args.length - 1].type === 'StreetViewPanorama') {\n            args[args.length - 1] = _this;\n        }\n        else if (_objectInstance.__pgmId.indexOf('markercluster_') !== -1) {\n            var _overlays = _objectInstance.getMap().get('_overlays') || {};\n            var overlay = _overlays[args[args.length - 1].getId()];\n            if (!overlay) {\n                var markerJS = args[args.length - 1];\n                var markerId_1 = markerJS.getId();\n                var markerCluster = _objectInstance;\n                overlay = new Marker(markerCluster.getMap(), markerJS);\n                _objectInstance.getMap().get('_overlays')[markerId_1] = overlay;\n                markerJS.one(markerJS.getId() + '_remove', function () {\n                    var overlays = _objectInstance.getMap().get('_overlays');\n                    if (overlays) {\n                        overlays[markerId_1] = null;\n                        delete overlays[markerId_1];\n                    }\n                });\n            }\n            args[args.length - 1] = overlay;\n        }\n        else {\n            args[args.length - 1] = _objectInstance.getMap().get('_overlays')[args[args.length - 1].getId()];\n        }\n    }\n    return args;\n};\nvar BaseClass = /** @class */ (function () {\n    function BaseClass(_objectInstance) {\n        if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === true) {\n            if (!_objectInstance) {\n                _objectInstance = new (GoogleMaps.getPlugin().BaseClass)();\n            }\n            this._objectInstance = _objectInstance;\n        }\n        else {\n            throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before executing any methods.');\n        }\n    }\n    BaseClass.prototype.addEventListener = function (eventName) {\n        var _this = this;\n        return (function () {\n            if (instanceAvailability(_this) === true) {\n                return new Observable(function (observer) {\n                    _this._objectInstance.addEventListener(eventName, function () {\n                        var args = [];\n                        for (var _i = 0; _i < arguments.length; _i++) {\n                            args[_i] = arguments[_i];\n                        }\n                        var newArgs = normalizeArgumentsOfEventListener.call(_this, _this._objectInstance, args);\n                        observer.next(newArgs);\n                    });\n                });\n            }\n        })();\n    };\n    BaseClass.prototype.addEventListenerOnce = function (eventName) {\n        var _this = this;\n        return (function () {\n            if (instanceAvailability(_this) === true) {\n                return getPromise(function (resolve) {\n                    _this._objectInstance.one(eventName, function () {\n                        var args = [];\n                        for (var _i = 0; _i < arguments.length; _i++) {\n                            args[_i] = arguments[_i];\n                        }\n                        var newArgs = normalizeArgumentsOfEventListener.call(_this, _this._objectInstance, args);\n                        resolve(newArgs);\n                    });\n                });\n            }\n        })();\n    };\n    BaseClass.prototype.addListenerOnce = function (eventName) {\n        var _this = this;\n        return (function () {\n            if (instanceAvailability(_this) === true) {\n                console.warn('[GoogleMaps] \"addListenerOnce\" is deprecated. Please use \"addEventListenerOnce\".');\n                return _this.addEventListenerOnce(eventName);\n            }\n        })();\n    };\n    BaseClass.prototype.get = function (key) { return cordovaInstance(this, \"get\", { \"sync\": true }, arguments); };\n    BaseClass.prototype.set = function (key, value, noNotify) { return cordovaInstance(this, \"set\", { \"sync\": true }, arguments); };\n    BaseClass.prototype.bindTo = function (key, target, targetKey, noNotify) { return cordovaInstance(this, \"bindTo\", { \"sync\": true }, arguments); };\n    BaseClass.prototype.on = function (eventName) {\n        var _this = this;\n        return (function () {\n            if (instanceAvailability(_this) === true) {\n                return new Observable(function (observer) {\n                    _this._objectInstance.on(eventName, function () {\n                        var args = [];\n                        for (var _i = 0; _i < arguments.length; _i++) {\n                            args[_i] = arguments[_i];\n                        }\n                        var newArgs = normalizeArgumentsOfEventListener.call(_this, _this._objectInstance, args);\n                        observer.next(newArgs);\n                    });\n                });\n            }\n        })();\n    };\n    BaseClass.prototype.one = function (eventName) {\n        var _this = this;\n        return (function () {\n            if (instanceAvailability(_this) === true) {\n                return getPromise(function (resolve) {\n                    _this._objectInstance.one(eventName, function () {\n                        var args = [];\n                        for (var _i = 0; _i < arguments.length; _i++) {\n                            args[_i] = arguments[_i];\n                        }\n                        var newArgs = normalizeArgumentsOfEventListener.call(_this, _this._objectInstance, args);\n                        resolve(newArgs);\n                    });\n                });\n            }\n        })();\n    };\n    BaseClass.prototype.hasEventListener = function () { return cordovaInstance(this, \"hasEventListener\", { \"sync\": true }, arguments); };\n    BaseClass.prototype.empty = function () { return cordovaInstance(this, \"empty\", { \"sync\": true }, arguments); };\n    BaseClass.prototype.trigger = function (eventName) {\n        var parameters = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            parameters[_i - 1] = arguments[_i];\n        }\n        return cordovaInstance(this, \"trigger\", { \"sync\": true }, arguments);\n    };\n    BaseClass.prototype.destroy = function () { return cordovaInstance(this, \"destroy\", { \"sync\": true }, arguments); };\n    BaseClass.prototype.removeEventListener = function (eventName, listener) { return cordovaInstance(this, \"removeEventListener\", { \"sync\": true }, arguments); };\n    BaseClass.prototype.off = function (eventName, listener) { return cordovaInstance(this, \"off\", { \"sync\": true }, arguments); };\n    BaseClass.pluginName = \"GoogleMaps\";\n    BaseClass.plugin = \"cordova-plugin-googlemaps\";\n    BaseClass.pluginRef = \"plugin.google.maps.BaseClass\";\n    return BaseClass;\n}());\nexport { BaseClass };\nvar BaseArrayClass = /** @class */ (function (_super) {\n    __extends(BaseArrayClass, _super);\n    function BaseArrayClass(initialData) {\n        var _this = this;\n        if (initialData instanceof GoogleMaps.getPlugin().BaseArrayClass) {\n            _this = _super.call(this, initialData) || this;\n        }\n        else if (Array.isArray(initialData)) {\n            _this = _super.call(this, new (GoogleMaps.getPlugin().BaseArrayClass)(initialData)) || this;\n        }\n        else {\n            _this = _super.call(this, new (GoogleMaps.getPlugin().BaseArrayClass)([])) || this;\n        }\n        return _this;\n    }\n    BaseArrayClass.prototype.empty = function (noNotify) { return cordovaInstance(this, \"empty\", { \"sync\": true }, arguments); };\n    BaseArrayClass.prototype.forEach = function (fn) { return cordovaInstance(this, \"forEach\", { \"sync\": true }, arguments); };\n    /**\n     * Iterate over each element, calling the provided callback.\n     * @param fn {Function}\n     * @return {Promise<void>}\n     */\n    BaseArrayClass.prototype.forEachAsync = function (fn) {\n        var _this = this;\n        return getPromise(function (resolve) {\n            _this._objectInstance.forEach(fn, resolve);\n        });\n    };\n    BaseArrayClass.prototype.map = function (fn) { return cordovaInstance(this, \"map\", { \"sync\": true }, arguments); };\n    /**\n     * Iterate over each element, calling the provided callback.\n     * Then you can get the results of each callback.\n     * @param fn {Function}\n     * @param callback {Function}\n     * @return {Promise<any>} returns a new array with the results\n     */\n    BaseArrayClass.prototype.mapAsync = function (fn) {\n        var _this = this;\n        return getPromise(function (resolve) {\n            _this._objectInstance.map(fn, resolve);\n        });\n    };\n    /**\n     * Same as `mapAsync`, but keep the execution order\n     * @param fn {Function}\n     * @param callback {Function}\n     * @return {Promise<any>} returns a new array with the results\n     */\n    BaseArrayClass.prototype.mapSeries = function (fn) {\n        var _this = this;\n        return getPromise(function (resolve) {\n            _this._objectInstance.mapSeries(fn, resolve);\n        });\n    };\n    BaseArrayClass.prototype.filter = function (fn) { return cordovaInstance(this, \"filter\", { \"sync\": true }, arguments); };\n    /**\n     * The filterAsync() method creates a new array with all elements that pass the test implemented by the provided function.\n     * @param fn {Function}\n     * @param callback {Function}\n     * @return {Promise<T[]>} returns a new filtered array\n     */\n    BaseArrayClass.prototype.filterAsync = function (fn) {\n        var _this = this;\n        return getPromise(function (resolve) {\n            _this._objectInstance.filter(fn, resolve);\n        });\n    };\n    BaseArrayClass.prototype.getArray = function () { return cordovaInstance(this, \"getArray\", { \"sync\": true }, arguments); };\n    BaseArrayClass.prototype.getAt = function (index) { return cordovaInstance(this, \"getAt\", { \"sync\": true }, arguments); };\n    BaseArrayClass.prototype.getLength = function () { return cordovaInstance(this, \"getLength\", { \"sync\": true }, arguments); };\n    BaseArrayClass.prototype.indexOf = function (element) { return cordovaInstance(this, \"indexOf\", { \"sync\": true }, arguments); };\n    BaseArrayClass.prototype.reverse = function () { return cordovaInstance(this, \"reverse\", { \"sync\": true }, arguments); };\n    BaseArrayClass.prototype.sort = function () { return cordovaInstance(this, \"sort\", { \"sync\": true }, arguments); };\n    BaseArrayClass.prototype.insertAt = function (index, element, noNotify) { return cordovaInstance(this, \"insertAt\", { \"sync\": true }, arguments); };\n    BaseArrayClass.prototype.pop = function (noNotify) { return cordovaInstance(this, \"pop\", { \"sync\": true }, arguments); };\n    BaseArrayClass.prototype.push = function (element, noNotify) { return cordovaInstance(this, \"push\", { \"sync\": true }, arguments); };\n    BaseArrayClass.prototype.removeAt = function (index, noNotify) { return cordovaInstance(this, \"removeAt\", { \"sync\": true }, arguments); };\n    BaseArrayClass.prototype.setAt = function (index, element, noNotify) { return cordovaInstance(this, \"setAt\", { \"sync\": true }, arguments); };\n    BaseArrayClass.pluginName = \"BaseArrayClass\";\n    BaseArrayClass.plugin = \"cordova-plugin-googlemaps\";\n    BaseArrayClass.pluginRef = \"plugin.google.maps.BaseArrayClass\";\n    return BaseArrayClass;\n}(BaseClass));\nexport { BaseArrayClass };\nvar Circle = /** @class */ (function (_super) {\n    __extends(Circle, _super);\n    function Circle(_map, _objectInstance) {\n        var _this = _super.call(this, _objectInstance) || this;\n        _this._map = _map;\n        return _this;\n    }\n    Circle.prototype.getId = function () { return cordovaInstance(this, \"getId\", { \"sync\": true }, arguments); };\n    /**\n     * Returns the map instance.\n     * @return {GoogleMap}\n     */\n    Circle.prototype.getMap = function () {\n        return this._map;\n    };\n    Circle.prototype.setCenter = function (latLng) { return cordovaInstance(this, \"setCenter\", { \"sync\": true }, arguments); };\n    Circle.prototype.getCenter = function () { return cordovaInstance(this, \"getCenter\", { \"sync\": true }, arguments); };\n    Circle.prototype.getRadius = function () { return cordovaInstance(this, \"getRadius\", { \"sync\": true }, arguments); };\n    Circle.prototype.setRadius = function (radius) { return cordovaInstance(this, \"setRadius\", { \"sync\": true }, arguments); };\n    Circle.prototype.setFillColor = function (color) { return cordovaInstance(this, \"setFillColor\", { \"sync\": true }, arguments); };\n    Circle.prototype.getFillColor = function () { return cordovaInstance(this, \"getFillColor\", { \"sync\": true }, arguments); };\n    Circle.prototype.setStrokeWidth = function (strokeWidth) { return cordovaInstance(this, \"setStrokeWidth\", { \"sync\": true }, arguments); };\n    Circle.prototype.getStrokeWidth = function () { return cordovaInstance(this, \"getStrokeWidth\", { \"sync\": true }, arguments); };\n    Circle.prototype.setStrokeColor = function (strokeColor) { return cordovaInstance(this, \"setStrokeColor\", { \"sync\": true }, arguments); };\n    Circle.prototype.getStrokeColor = function () { return cordovaInstance(this, \"getStrokeColor\", { \"sync\": true }, arguments); };\n    Circle.prototype.setClickable = function (clickable) { return cordovaInstance(this, \"setClickable\", { \"sync\": true }, arguments); };\n    Circle.prototype.getClickable = function () { return cordovaInstance(this, \"getClickable\", { \"sync\": true }, arguments); };\n    Circle.prototype.setZIndex = function (zIndex) { return cordovaInstance(this, \"setZIndex\", { \"sync\": true }, arguments); };\n    Circle.prototype.getZIndex = function () { return cordovaInstance(this, \"getZIndex\", { \"sync\": true }, arguments); };\n    Circle.prototype.remove = function () { return cordovaInstance(this, \"remove\", {}, arguments); };\n    Circle.prototype.getBounds = function () { return cordovaInstance(this, \"getBounds\", { \"sync\": true }, arguments); };\n    Circle.prototype.setVisible = function (visible) { return cordovaInstance(this, \"setVisible\", { \"sync\": true }, arguments); };\n    Circle.prototype.getVisible = function () { return cordovaInstance(this, \"getVisible\", { \"sync\": true }, arguments); };\n    return Circle;\n}(BaseClass));\nexport { Circle };\nvar Environment = /** @class */ (function () {\n    function Environment() {\n    }\n    /**\n     * Set environment variables.\n     */\n    Environment.setEnv = function (envOptions) {\n        if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\n            throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\n        }\n        GoogleMaps.getPlugin().environment.setEnv(envOptions);\n    };\n    /**\n     * Get the open source software license information for Google Maps SDK for iOS.\n     * @return {Promise<any>}\n     */\n    Environment.getLicenseInfo = function () {\n        if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\n            throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\n        }\n        return getPromise(function (resolve) {\n            GoogleMaps.getPlugin().environment.getLicenseInfo(function (text) { return resolve(text); });\n        });\n    };\n    /**\n     * Specifies the background color of the app.\n     * @param color\n     */\n    Environment.setBackgroundColor = function (color) {\n        if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\n            throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\n        }\n        GoogleMaps.getPlugin().environment.setBackgroundColor(color);\n    };\n    /**\n     * @deprecation This method is static. Please use Environment.getLicenseInfo()\n     * @hidden\n     */\n    Environment.prototype.getLicenseInfo = function () {\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Environment.getLicenseInfo()');\n        return Environment.getLicenseInfo();\n    };\n    /**\n     * @deprecation This method is static. Please use Environment.setBackgroundColor()\n     * @hidden\n     */\n    Environment.prototype.setBackgroundColor = function (color) {\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Environment.setBackgroundColor()');\n        Environment.setBackgroundColor(color);\n    };\n    Environment.plugin = \"cordova-plugin-googlemaps\";\n    Environment.pluginName = \"GoogleMaps\";\n    Environment.pluginRef = \"plugin.google.maps.environment\";\n    Environment.repo = \"\";\n    return Environment;\n}());\nexport { Environment };\nvar Geocoder = /** @class */ (function () {\n    function Geocoder() {\n    }\n    /**\n     * @deprecation This method is static. Please use Geocoder.geocode()\n     * @hidden\n     */\n    Geocoder.prototype.geocode = function (request) {\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Geocoder.geocode()');\n        return Geocoder.geocode(request);\n    };\n    /**\n     * Converts position to address and vice versa\n     * @param {GeocoderRequest} request Request object with either an address or a position\n     * @return {Promise<GeocoderResult[] | BaseArrayClass<GeocoderResult>>}\n     */\n    Geocoder.geocode = function (request) {\n        if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\n            throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\n        }\n        if (request.address instanceof Array || Array.isArray(request.address) ||\n            request.position instanceof Array || Array.isArray(request.position)) {\n            // -------------------------\n            // Geocoder.geocode({\n            //   address: [\n            //    \"Kyoto, Japan\",\n            //    \"Tokyo, Japan\"\n            //   ]\n            // })\n            // -------------------------\n            return getPromise(function (resolve, reject) {\n                GoogleMaps.getPlugin().Geocoder.geocode(request, function (mvcArray) {\n                    if (mvcArray) {\n                        resolve(new BaseArrayClass(mvcArray));\n                    }\n                    else {\n                        reject();\n                    }\n                });\n            });\n        }\n        else {\n            // -------------------------\n            // Geocoder.geocode({\n            //   address: \"Kyoto, Japan\"\n            // })\n            // -------------------------\n            return getPromise(function (resolve, reject) {\n                GoogleMaps.getPlugin().Geocoder.geocode(request, function (results) {\n                    if (results) {\n                        resolve(results);\n                    }\n                    else {\n                        reject();\n                    }\n                });\n            });\n        }\n    };\n    Geocoder.pluginName = \"GoogleMaps\";\n    Geocoder.pluginRef = \"plugin.google.maps.Geocoder\";\n    Geocoder.plugin = \"cordova-plugin-googlemaps\";\n    Geocoder.repo = \"\";\n    return Geocoder;\n}());\nexport { Geocoder };\nvar LocationService = /** @class */ (function () {\n    function LocationService() {\n    }\n    /**\n     * Get the current device location without map\n     * @return {Promise<MyLocation>}\n     */\n    LocationService.getMyLocation = function (options) {\n        if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\n            throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\n        }\n        return getPromise(function (resolve, reject) {\n            GoogleMaps.getPlugin().LocationService.getMyLocation(options, resolve, reject);\n        });\n    };\n    /**\n     * Return true if the application has geolocation permission\n     * @return {Promise<boolean>}\n     */\n    LocationService.hasPermission = function () {\n        if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\n            throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\n        }\n        return getPromise(function (resolve, reject) {\n            GoogleMaps.getPlugin().LocationService.hasPermission(resolve, reject);\n        });\n    };\n    LocationService.pluginName = \"GoogleMaps\";\n    LocationService.pluginRef = \"plugin.google.maps.LocationService\";\n    LocationService.plugin = \"cordova-plugin-googlemaps\";\n    LocationService.repo = \"\";\n    return LocationService;\n}());\nexport { LocationService };\nvar Encoding = /** @class */ (function () {\n    function Encoding() {\n    }\n    /**\n     * Decodes an encoded path string into a sequence of LatLngs.\n     * @param encoded {string} an encoded path string\n     * @param precision? {number} default: 5\n     * @return {LatLng}\n     */\n    Encoding.decodePath = function (encoded, precision) {\n        if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\n            throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\n        }\n        return GoogleMaps.getPlugin().encoding.decodePath(encoded, precision);\n    };\n    /**\n     * Encodes a sequence of LatLngs into an encoded path string.\n     * @param path {ILatLng[] | BaseArrayClass<ILatLng>} a sequence of LatLngs\n     * @return {string}\n     */\n    Encoding.encodePath = function (path) {\n        if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\n            throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\n        }\n        return GoogleMaps.getPlugin().encoding.encodePath(path);\n    };\n    /**\n     * @deprecation This method is static. Please use Encoding.decodePath()\n     * @hidden\n     */\n    Encoding.prototype.decodePath = function (encoded, precision) {\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Encoding.decodePath()');\n        return Encoding.decodePath(encoded, precision);\n    };\n    /**\n     * @deprecation This method is static. Please use Encoding.encodePath()\n     * @hidden\n     */\n    Encoding.prototype.encodePath = function (path) {\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Encoding.encodePath()');\n        return Encoding.encodePath(path);\n    };\n    Encoding.pluginName = \"GoogleMaps\";\n    Encoding.pluginRef = \"plugin.google.maps.geometry.encoding\";\n    Encoding.plugin = \"cordova-plugin-googlemaps\";\n    Encoding.repo = \"\";\n    return Encoding;\n}());\nexport { Encoding };\nvar Poly = /** @class */ (function () {\n    function Poly() {\n    }\n    /**\n     * Returns true if the specified location is in the polygon path\n     * @param location {ILatLng}\n     * @param path {ILatLng[]}\n     * @return {boolean}\n     */\n    Poly.containsLocation = function (location, path) {\n        if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\n            throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\n        }\n        return GoogleMaps.getPlugin().geometry.poly.containsLocation(location, path);\n    };\n    /**\n     * Returns true if the specified location is on the polyline path\n     * @param location {ILatLng}\n     * @param path {ILatLng[]}\n     * @return {boolean}\n     */\n    Poly.isLocationOnEdge = function (location, path) {\n        if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\n            throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\n        }\n        return GoogleMaps.getPlugin().geometry.poly.isLocationOnEdge(location, path);\n    };\n    Poly.pluginName = \"GoogleMaps\";\n    Poly.pluginRef = \"plugin.google.maps.geometry.poly\";\n    Poly.plugin = \"cordova-plugin-googlemaps\";\n    Poly.repo = \"\";\n    return Poly;\n}());\nexport { Poly };\nvar Spherical = /** @class */ (function () {\n    function Spherical() {\n    }\n    /**\n     * Returns the distance, in meters, between two LatLngs.\n     * @param locationA {ILatLng}\n     * @param locationB {ILatLng}\n     * @return {number}\n     */\n    Spherical.computeDistanceBetween = function (from, to) {\n        if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\n            throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\n        }\n        return GoogleMaps.getPlugin().geometry.spherical.computeDistanceBetween(from, to);\n    };\n    /**\n     * Returns the LatLng resulting from moving a distance from an origin in the specified heading (expressed in degrees clockwise from north)\n     * @param from {ILatLng}\n     * @param distance {number}\n     * @param heading {number}\n     * @return {LatLng}\n     */\n    Spherical.computeOffset = function (from, distance, heading) {\n        if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\n            throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\n        }\n        return GoogleMaps.getPlugin().geometry.spherical.computeOffset(from, distance, heading);\n    };\n    /**\n     * Returns the location of origin when provided with a LatLng destination, meters travelled and original heading. Headings are expressed in degrees clockwise from North. This function returns null when no solution is available.\n     * @param to {ILatLng} The destination LatLng.\n     * @param distance {number} The distance travelled, in meters.\n     * @param heading {number} The heading in degrees clockwise from north.\n     * @return {LatLng}\n     */\n    Spherical.computeOffsetOrigin = function (to, distance, heading) {\n        if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\n            throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\n        }\n        return GoogleMaps.getPlugin().geometry.spherical.computeOffsetOrigin(to, distance, heading);\n    };\n    /**\n     * Returns the length of the given path.\n     * @param path {ILatLng[] | BaseArrayClass<ILatLng>}\n     * @return {number}\n     */\n    Spherical.computeLength = function (path) {\n        if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\n            throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\n        }\n        return GoogleMaps.getPlugin().geometry.spherical.computeLength(path);\n    };\n    /**\n     * Returns the area of a closed path. The computed area uses the same units as the radius.\n     * @param path {ILatLng[] | BaseArrayClass<ILatLng>}.\n     * @return {number}\n     */\n    Spherical.computeArea = function (path) {\n        if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\n            throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\n        }\n        return GoogleMaps.getPlugin().geometry.spherical.computeLength(path);\n    };\n    /**\n     * Returns the signed area of a closed path. The signed area may be used to determine the orientation of the path.\n     * @param path {ILatLng[] | BaseArrayClass<ILatLng>}.\n     * @return {number}\n     */\n    Spherical.computeSignedArea = function (path) {\n        if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\n            throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\n        }\n        return GoogleMaps.getPlugin().geometry.spherical.computeSignedArea(path);\n    };\n    /**\n     * Returns the heading from one LatLng to another LatLng. Headings are expressed in degrees clockwise from North within the range (-180,180).\n     * @param from {ILatLng}\n     * @param to {ILatLng}\n     * @return {number}\n     */\n    Spherical.computeHeading = function (from, to) {\n        if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\n            throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\n        }\n        return GoogleMaps.getPlugin().geometry.spherical.computeHeading(from, to);\n    };\n    /**\n     * Returns the LatLng which lies the given fraction of the way between the origin LatLng and the destination LatLng.\n     * @param from {ILatLng}     The LatLng from which to start.\n     * @param to {ILatLng}       The LatLng toward which to travel.\n     * @param fraction {number}  A fraction of the distance to travel from 0.0 to 1.0 .\n     * @return {LatLng}\n     */\n    Spherical.interpolate = function (from, to, fraction) {\n        if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === false) {\n            throw new Error('cordova-plugin-googlemaps is not ready. Please use platform.ready() before accessing this method.');\n        }\n        return GoogleMaps.getPlugin().geometry.spherical.interpolate(from, to, fraction);\n    };\n    /**\n     * @deprecation This method is static. Please use Spherical.computeDistanceBetween()\n     * @hidden\n     */\n    Spherical.prototype.computeDistanceBetween = function (from, to) {\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeDistanceBetween()');\n        return Spherical.computeDistanceBetween(from, to);\n    };\n    /**\n     * @deprecation This method is static. Please use Spherical.computeOffset()\n     * @hidden\n     */\n    Spherical.prototype.computeOffset = function (from, distance, heading) {\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeOffset()');\n        return Spherical.computeOffset(from, distance, heading);\n    };\n    /**\n     * @deprecation This method is static. Please use Spherical.computeOffsetOrigin()\n     * @hidden\n     */\n    Spherical.prototype.computeOffsetOrigin = function (to, distance, heading) {\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeOffsetOrigin()');\n        return Spherical.computeOffsetOrigin(to, distance, heading);\n    };\n    /**\n     * @deprecation This method is static. Please use Spherical.computeLength()\n     * @hidden\n     */\n    Spherical.prototype.computeLength = function (path) {\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeLength()');\n        return Spherical.computeLength(path);\n    };\n    /**\n     * @deprecation This method is static. Please use Spherical.computeArea()\n     * @hidden\n     */\n    Spherical.prototype.computeArea = function (path) {\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeArea()');\n        return Spherical.computeArea(path);\n    };\n    /**\n     * @deprecation This method is static. Please use Spherical.computeSignedArea()\n     * @hidden\n     */\n    Spherical.prototype.computeSignedArea = function (path) {\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeSignedArea()');\n        return Spherical.computeSignedArea(path);\n    };\n    /**\n     * @deprecation This method is static. Please use Spherical.computeHeading()\n     * @hidden\n     */\n    Spherical.prototype.computeHeading = function (from, to) {\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.computeHeading()');\n        return Spherical.computeHeading(from, to);\n    };\n    /**\n     * @deprecation This method is static. Please use Spherical.interpolate()\n     * @hidden\n     */\n    Spherical.prototype.interpolate = function (from, to, fraction) {\n        console.error('GoogleMaps', '[deprecated] This method is static. Please use Spherical.interpolate()');\n        return Spherical.interpolate(from, to, fraction);\n    };\n    Spherical.pluginName = \"GoogleMaps\";\n    Spherical.pluginRef = \"plugin.google.maps.geometry.spherical\";\n    Spherical.plugin = \"cordova-plugin-googlemaps\";\n    Spherical.repo = \"\";\n    return Spherical;\n}());\nexport { Spherical };\nvar StreetViewPanorama = /** @class */ (function (_super) {\n    __extends(StreetViewPanorama, _super);\n    function StreetViewPanorama(element, options) {\n        var _this = this;\n        if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === true) {\n            // -------------------\n            // Create a panorama\n            // -------------------\n            if (element instanceof HTMLElement) {\n                if (element.offsetWidth >= 100 && element.offsetHeight >= 100) {\n                    _this = _super.call(this, GoogleMaps.getPlugin().StreetView.getPanorama(element, options)) || this;\n                }\n                else {\n                    throw new Error(element.tagName + ' is too small. Must be bigger than 100x100.');\n                }\n            }\n            else if (typeof element === 'string') {\n                _this = _super.call(this, GoogleMaps.getPlugin().StreetView.getPanorama(getPromise(function (resolve, reject) {\n                    var count;\n                    var i;\n                    count = 0;\n                    var timer = setInterval(function () {\n                        var targets;\n                        for (i = 0; i < TARGET_ELEMENT_FINDING_QUERYS.length; i++) {\n                            targets = Array.from(document.querySelectorAll(TARGET_ELEMENT_FINDING_QUERYS[i] + element));\n                            if (targets.length > 0) {\n                                targets = targets.filter(function (target) {\n                                    return !target.hasAttribute('__pluginmapid');\n                                });\n                            }\n                            if (targets.length === 1 && targets[0] && targets[0].offsetWidth >= 100 && targets[0].offsetHeight >= 100) {\n                                clearInterval(timer);\n                                resolve([targets[0], options]);\n                                return;\n                            }\n                        }\n                        if (count++ < 20) {\n                            return;\n                        }\n                        clearInterval(timer);\n                        _this._objectInstance.remove();\n                        if (targets.length > 0 && targets[0] && targets[0].offsetWidth < 100 || targets[0].offsetHeight < 100) {\n                            reject(new Error(targets[0].tagName + '[#' + element + '] is too small. Must be bigger than 100x100.'));\n                        }\n                        else {\n                            reject(new Error('Can not find the element [#' + element + ']'));\n                        }\n                    }, 100);\n                }), options)) || this;\n            }\n        }\n        else {\n            var errorMessage = [\n                '[GoogleMaps]'\n            ];\n            if (!window.cordova) {\n                errorMessage.push('You need to execute \"$> ionic cordova run browser\".');\n                errorMessage.push('\"$> ionic serve\" is not supported.');\n            }\n            else {\n                errorMessage.push('cordova-plugin-googlemaps is not installed or not ready yet.');\n            }\n            if (element instanceof HTMLElement) {\n                displayErrorMessage(element, errorMessage.join('<br />'));\n            }\n            else if (typeof element === 'string') {\n                var targets = Array.from(document.querySelectorAll('#' + element));\n                if (targets.length > 0) {\n                    targets = targets.filter(function (target) {\n                        return !target.hasAttribute('__pluginmapid');\n                    });\n                }\n                if (targets.length === 1 && targets[0]) {\n                    displayErrorMessage(targets[0], errorMessage.join('<br />'));\n                }\n            }\n            throw new Error(errorMessage.join(''));\n        }\n        return _this;\n    }\n    StreetViewPanorama.prototype.setPov = function (pov) { return cordovaInstance(this, \"setPov\", {}, arguments); };\n    StreetViewPanorama.prototype.setPosition = function (cameraPosition) { return cordovaInstance(this, \"setPosition\", {}, arguments); };\n    StreetViewPanorama.prototype.setPanningGesturesEnabled = function (gestureEnable) { return cordovaInstance(this, \"setPanningGesturesEnabled\", { \"sync\": true }, arguments); };\n    StreetViewPanorama.prototype.getPanningGesturesEnabled = function () { return cordovaInstance(this, \"getPanningGesturesEnabled\", { \"sync\": true }, arguments); };\n    StreetViewPanorama.prototype.setZoomGesturesEnabled = function (gestureEnable) { return cordovaInstance(this, \"setZoomGesturesEnabled\", { \"sync\": true }, arguments); };\n    StreetViewPanorama.prototype.getZoomGesturesEnabled = function () { return cordovaInstance(this, \"getZoomGesturesEnabled\", { \"sync\": true }, arguments); };\n    StreetViewPanorama.prototype.setStreetNamesEnabled = function (gestureEnable) { return cordovaInstance(this, \"setStreetNamesEnabled\", { \"sync\": true }, arguments); };\n    StreetViewPanorama.prototype.getStreetNamesEnabled = function () { return cordovaInstance(this, \"getStreetNamesEnabled\", { \"sync\": true }, arguments); };\n    StreetViewPanorama.prototype.setNavigationEnabled = function (gestureEnable) { return cordovaInstance(this, \"setNavigationEnabled\", { \"sync\": true }, arguments); };\n    StreetViewPanorama.prototype.getNavigationEnabled = function () { return cordovaInstance(this, \"getNavigationEnabled\", { \"sync\": true }, arguments); };\n    StreetViewPanorama.prototype.getLinks = function () { return cordovaInstance(this, \"getLinks\", { \"sync\": true }, arguments); };\n    StreetViewPanorama.prototype.getLocation = function () { return cordovaInstance(this, \"getLocation\", { \"sync\": true }, arguments); };\n    StreetViewPanorama.prototype.getPanoId = function () { return cordovaInstance(this, \"getPanoId\", { \"sync\": true }, arguments); };\n    StreetViewPanorama.prototype.getPosition = function () { return cordovaInstance(this, \"getPosition\", { \"sync\": true }, arguments); };\n    StreetViewPanorama.prototype.remove = function () { return cordovaInstance(this, \"remove\", {}, arguments); };\n    StreetViewPanorama.pluginName = \"StreetViewPanorama\";\n    StreetViewPanorama.plugin = \"cordova-plugin-googlemaps\";\n    return StreetViewPanorama;\n}(BaseClass));\nexport { StreetViewPanorama };\nvar GoogleMap = /** @class */ (function (_super) {\n    __extends(GoogleMap, _super);\n    function GoogleMap(element, options, elFindTimeout) {\n        if (elFindTimeout === void 0) { elFindTimeout = 2000; }\n        var _this = this;\n        if (checkAvailability(GoogleMaps.getPluginRef(), null, GoogleMaps.getPluginName()) === true) {\n            // ---------------\n            // Create a map\n            // ---------------\n            if (element instanceof HTMLElement) {\n                if (!element.offsetParent) {\n                    throw new Error('Element must be under <body>');\n                }\n                if (element.offsetWidth >= 100 && element.offsetHeight >= 100) {\n                    _this = _super.call(this, GoogleMaps.getPlugin().Map.getMap(element, options)) || this;\n                }\n                else {\n                    throw new Error(element.tagName + ' is too small. Must be bigger than 100x100.');\n                }\n            }\n            else if (typeof element === 'string') {\n                _this = _super.call(this, GoogleMaps.getPlugin().Map.getMap(getPromise(function (resolve, reject) {\n                    var numAttempts = 0;\n                    var durationBetweenAttemptsMs = 100;\n                    var maxAttempts = Math.floor(elFindTimeout / durationBetweenAttemptsMs);\n                    var timer = setInterval(function () {\n                        var targets;\n                        for (var i = 0; i < TARGET_ELEMENT_FINDING_QUERYS.length; i++) {\n                            targets = Array.from(document.querySelectorAll(TARGET_ELEMENT_FINDING_QUERYS[i] + element))\n                                // Filter out el which are already map layers\n                                .filter(function (target) {\n                                return !target.hasAttribute('__pluginmapid');\n                            });\n                            if (targets.length === 1 && targets[0] && targets[0].offsetWidth >= 100 && targets[0].offsetHeight >= 100) {\n                                clearInterval(timer);\n                                resolve([targets[0], options]);\n                                return;\n                            }\n                        }\n                        if (numAttempts++ < maxAttempts) {\n                            return;\n                        }\n                        clearInterval(timer);\n                        _this._objectInstance.remove();\n                        if (targets.length > 0 && targets[0] && (targets[0].offsetWidth < 100 || targets[0].offsetHeight < 100)) {\n                            reject(new Error(targets[0].tagName + '[#' + element + '] is too small. Must be bigger than 100x100.'));\n                        }\n                        else {\n                            reject(new Error('Can not find the element [#' + element + ']'));\n                        }\n                    }, durationBetweenAttemptsMs);\n                }), options)) || this;\n            }\n            else if (element === null && options) {\n                _this = _super.call(this, GoogleMaps.getPlugin().Map.getMap(null, options)) || this;\n            }\n        }\n        else {\n            var errorMessage = [\n                '[GoogleMaps]'\n            ];\n            if (!window.cordova) {\n                errorMessage.push('You need to execute \"$> ionic cordova run browser\".');\n                errorMessage.push('\"$> ionic serve\" is not supported.');\n            }\n            else {\n                errorMessage.push('cordova-plugin-googlemaps is not installed or not ready yet.');\n            }\n            console.error(errorMessage.join(''));\n            if (element instanceof HTMLElement) {\n                displayErrorMessage(element, errorMessage.join('<br />'));\n            }\n            else if (typeof element === 'string') {\n                var targets = Array.from(document.querySelectorAll('#' + element));\n                if (targets.length > 0) {\n                    targets = targets.filter(function (target) {\n                        return !target.hasAttribute('__pluginmapid');\n                    });\n                }\n                if (targets.length === 1 && targets[0]) {\n                    displayErrorMessage(targets[0], errorMessage.join('<br />'));\n                }\n            }\n        }\n        return _this;\n    }\n    GoogleMap.prototype.setDiv = function (domNode) {\n        var _this = this;\n        return (function () {\n            if (instanceAvailability(_this) === true) {\n                if (typeof domNode === 'string') {\n                    (getPromise(function (resolve, reject) {\n                        var i, targets;\n                        for (i = 0; i < TARGET_ELEMENT_FINDING_QUERYS.length; i++) {\n                            targets = Array.from(document.querySelectorAll(TARGET_ELEMENT_FINDING_QUERYS[i] + domNode));\n                            if (targets.length > 0) {\n                                targets = targets.filter(function (target) {\n                                    return !target.hasAttribute('__pluginmapid');\n                                });\n                            }\n                            if (targets.length === 1 && targets[0] && targets[0].offsetWidth >= 100 && targets[0].offsetHeight >= 100) {\n                                resolve(targets[0]);\n                                return;\n                            }\n                        }\n                        reject('Can not find [#' + domNode + '] element');\n                    }))\n                        .then(function (element) {\n                        _this._objectInstance.setDiv(element);\n                    });\n                }\n                else {\n                    if (domNode instanceof HTMLElement &&\n                        !domNode.offsetParent &&\n                        domNode.offsetWidth >= 100 && domNode.offsetHeight >= 100) {\n                        _this._objectInstance.setDiv(domNode);\n                    }\n                    else {\n                        throw new Error(domNode.tagName + ' is too small. Must be bigger than 100x100.');\n                    }\n                }\n            }\n        })();\n    };\n    GoogleMap.prototype.getDiv = function () { return cordovaInstance(this, \"getDiv\", { \"sync\": true }, arguments); };\n    GoogleMap.prototype.setMapTypeId = function (mapTypeId) { return cordovaInstance(this, \"setMapTypeId\", { \"sync\": true }, arguments); };\n    GoogleMap.prototype.animateCamera = function (cameraPosition) { return cordovaInstance(this, \"animateCamera\", {}, arguments); };\n    GoogleMap.prototype.animateCameraZoomIn = function () { return cordovaInstance(this, \"animateCameraZoomIn\", {}, arguments); };\n    GoogleMap.prototype.animateCameraZoomOut = function () { return cordovaInstance(this, \"animateCameraZoomOut\", {}, arguments); };\n    GoogleMap.prototype.moveCamera = function (cameraPosition) { return cordovaInstance(this, \"moveCamera\", {}, arguments); };\n    GoogleMap.prototype.moveCameraZoomIn = function () { return cordovaInstance(this, \"moveCameraZoomIn\", {}, arguments); };\n    GoogleMap.prototype.moveCameraZoomOut = function () { return cordovaInstance(this, \"moveCameraZoomOut\", {}, arguments); };\n    GoogleMap.prototype.getCameraPosition = function () { return cordovaInstance(this, \"getCameraPosition\", { \"sync\": true }, arguments); };\n    GoogleMap.prototype.getCameraTarget = function () { return cordovaInstance(this, \"getCameraTarget\", { \"sync\": true }, arguments); };\n    GoogleMap.prototype.getCameraZoom = function () { return cordovaInstance(this, \"getCameraZoom\", { \"sync\": true }, arguments); };\n    GoogleMap.prototype.getCameraBearing = function () { return cordovaInstance(this, \"getCameraBearing\", { \"sync\": true }, arguments); };\n    GoogleMap.prototype.getCameraTilt = function () { return cordovaInstance(this, \"getCameraTilt\", { \"sync\": true }, arguments); };\n    GoogleMap.prototype.setCameraTarget = function (latLng) { return cordovaInstance(this, \"setCameraTarget\", { \"sync\": true }, arguments); };\n    GoogleMap.prototype.setCameraZoom = function (zoomLevel) { return cordovaInstance(this, \"setCameraZoom\", { \"sync\": true }, arguments); };\n    GoogleMap.prototype.setCameraTilt = function (tiltAngle) { return cordovaInstance(this, \"setCameraTilt\", { \"sync\": true }, arguments); };\n    GoogleMap.prototype.setCameraBearing = function (bearing) { return cordovaInstance(this, \"setCameraBearing\", { \"sync\": true }, arguments); };\n    GoogleMap.prototype.panBy = function (x, y) { return cordovaInstance(this, \"panBy\", { \"sync\": true }, arguments); };\n    GoogleMap.prototype.getVisibleRegion = function () { return cordovaInstance(this, \"getVisibleRegion\", { \"sync\": true }, arguments); };\n    GoogleMap.prototype.getMyLocation = function (options) { return cordovaInstance(this, \"getMyLocation\", {}, arguments); };\n    GoogleMap.prototype.setClickable = function (isClickable) { return cordovaInstance(this, \"setClickable\", { \"sync\": true }, arguments); };\n    GoogleMap.prototype.remove = function () { return cordovaInstance(this, \"remove\", {}, arguments); };\n    GoogleMap.prototype.clear = function () { return cordovaInstance(this, \"clear\", {}, arguments); };\n    GoogleMap.prototype.fromLatLngToPoint = function (latLng) { return cordovaInstance(this, \"fromLatLngToPoint\", {}, arguments); };\n    GoogleMap.prototype.fromPointToLatLng = function (point) { return cordovaInstance(this, \"fromPointToLatLng\", {}, arguments); };\n    GoogleMap.prototype.setMyLocationEnabled = function (enabled) { return cordovaInstance(this, \"setMyLocationEnabled\", { \"sync\": true }, arguments); };\n    GoogleMap.prototype.setMyLocationButtonEnabled = function (enabled) { return cordovaInstance(this, \"setMyLocationButtonEnabled\", { \"sync\": true }, arguments); };\n    GoogleMap.prototype.getFocusedBuilding = function () { return cordovaInstance(this, \"getFocusedBuilding\", {}, arguments); };\n    GoogleMap.prototype.setIndoorEnabled = function (enabled) { return cordovaInstance(this, \"setIndoorEnabled\", { \"sync\": true }, arguments); };\n    GoogleMap.prototype.setTrafficEnabled = function (enabled) { return cordovaInstance(this, \"setTrafficEnabled\", { \"sync\": true }, arguments); };\n    GoogleMap.prototype.setCompassEnabled = function (enabled) { return cordovaInstance(this, \"setCompassEnabled\", { \"sync\": true }, arguments); };\n    GoogleMap.prototype.setAllGesturesEnabled = function (enabled) { return cordovaInstance(this, \"setAllGesturesEnabled\", { \"sync\": true }, arguments); };\n    GoogleMap.prototype.setVisible = function (visible) { return cordovaInstance(this, \"setVisible\", { \"sync\": true }, arguments); };\n    GoogleMap.prototype.setPadding = function (top, right, bottom, left) { return cordovaInstance(this, \"setPadding\", { \"sync\": true }, arguments); };\n    GoogleMap.prototype.setOptions = function (options) { return cordovaInstance(this, \"setOptions\", { \"sync\": true }, arguments); };\n    GoogleMap.prototype.addMarker = function (options) {\n        var _this = this;\n        return (function () {\n            if (instanceAvailability(_this) === true) {\n                return getPromise(function (resolve, reject) {\n                    _this._objectInstance.addMarker(options, function (marker) {\n                        if (marker) {\n                            var overlayId_1 = marker.getId();\n                            var overlay_1 = new Marker(_this, marker);\n                            _this.get('_overlays')[overlayId_1] = overlay_1;\n                            marker.one(overlayId_1 + '_remove', function () {\n                                if (_this.get('_overlays')) {\n                                    _this.get('_overlays')[overlayId_1] = null;\n                                    overlay_1.destroy();\n                                }\n                            });\n                            resolve(overlay_1);\n                        }\n                        else {\n                            reject();\n                        }\n                    });\n                });\n            }\n        })();\n    };\n    GoogleMap.prototype.addMarkerSync = function (options) {\n        var _this = this;\n        return (function () {\n            if (instanceAvailability(_this) === true) {\n                var marker = _this._objectInstance.addMarker(options);\n                var overlayId = marker.getId();\n                var overlay = new Marker(_this, marker);\n                _this.get('_overlays')[overlayId] = overlay;\n                marker.one(overlayId + '_remove', function () {\n                    if (_this.get('_overlays')) {\n                        _this.get('_overlays')[overlayId] = null;\n                        overlay.destroy();\n                    }\n                });\n                return overlay;\n            }\n        })();\n    };\n    GoogleMap.prototype.addMarkerCluster = function (options) {\n        var _this = this;\n        return (function () {\n            if (instanceAvailability(_this) === true) {\n                return getPromise(function (resolve, reject) {\n                    _this._objectInstance.addMarkerCluster(options, function (markerCluster) {\n                        if (markerCluster) {\n                            var overlayId_2 = markerCluster.getId();\n                            var overlay_2 = new MarkerCluster(_this, markerCluster);\n                            _this.get('_overlays')[overlayId_2] = overlay_2;\n                            markerCluster.one('remove', function () {\n                                if (_this.get('_overlays')) {\n                                    _this.get('_overlays')[overlayId_2] = null;\n                                    overlay_2.destroy();\n                                }\n                            });\n                            markerCluster.set('_overlays', new BaseArrayClass());\n                            resolve(overlay_2);\n                        }\n                        else {\n                            reject();\n                        }\n                    });\n                });\n            }\n        })();\n    };\n    GoogleMap.prototype.addMarkerClusterSync = function (options) {\n        var _this = this;\n        return (function () {\n            if (instanceAvailability(_this) === true) {\n                var markerCluster = _this._objectInstance.addMarkerCluster(options);\n                var overlayId = markerCluster.getId();\n                var overlay = new MarkerCluster(_this, markerCluster);\n                _this.get('_overlays')[overlayId] = overlay;\n                markerCluster.one(overlayId + '_remove', function () {\n                    if (_this.get('_overlays')) {\n                        _this.get('_overlays')[overlayId] = null;\n                        overlay.destroy();\n                    }\n                });\n                markerCluster.set('_overlays', new BaseArrayClass());\n                return overlay;\n            }\n        })();\n    };\n    GoogleMap.prototype.addCircle = function (options) {\n        var _this = this;\n        return (function () {\n            if (instanceAvailability(_this) === true) {\n                return getPromise(function (resolve, reject) {\n                    _this._objectInstance.addCircle(options, function (circle) {\n                        if (circle) {\n                            var overlayId_3 = circle.getId();\n                            var overlay_3 = new Circle(_this, circle);\n                            _this.get('_overlays')[overlayId_3] = overlay_3;\n                            circle.one(overlayId_3 + '_remove', function () {\n                                if (_this.get('_overlays')) {\n                                    _this.get('_overlays')[overlayId_3] = null;\n                                    overlay_3.destroy();\n                                }\n                            });\n                            resolve(overlay_3);\n                        }\n                        else {\n                            reject();\n                        }\n                    });\n                });\n            }\n        })();\n    };\n    GoogleMap.prototype.addCircleSync = function (options) {\n        var _this = this;\n        return (function () {\n            if (instanceAvailability(_this) === true) {\n                var circle = _this._objectInstance.addCircle(options);\n                var overlayId = circle.getId();\n                var overlay = new Circle(_this, circle);\n                _this.get('_overlays')[overlayId] = overlay;\n                circle.one(overlayId + '_remove', function () {\n                    if (_this.get('_overlays')) {\n                        _this.get('_overlays')[overlayId] = null;\n                        overlay.destroy();\n                    }\n                });\n                return overlay;\n            }\n        })();\n    };\n    GoogleMap.prototype.addPolygon = function (options) {\n        var _this = this;\n        return (function () {\n            if (instanceAvailability(_this) === true) {\n                return getPromise(function (resolve, reject) {\n                    _this._objectInstance.addPolygon(options, function (polygon) {\n                        if (polygon) {\n                            var overlayId_4 = polygon.getId();\n                            var overlay_4 = new Polygon(_this, polygon);\n                            _this.get('_overlays')[overlayId_4] = overlay_4;\n                            polygon.one(overlayId_4 + '_remove', function () {\n                                if (_this.get('_overlays')) {\n                                    _this.get('_overlays')[overlayId_4] = null;\n                                    overlay_4.destroy();\n                                }\n                            });\n                            resolve(overlay_4);\n                        }\n                        else {\n                            reject();\n                        }\n                    });\n                });\n            }\n        })();\n    };\n    GoogleMap.prototype.addPolygonSync = function (options) {\n        var _this = this;\n        return (function () {\n            if (instanceAvailability(_this) === true) {\n                var polygon = _this._objectInstance.addPolygon(options);\n                var overlayId = polygon.getId();\n                var overlay = new Polygon(_this, polygon);\n                _this.get('_overlays')[overlayId] = overlay;\n                polygon.one(overlayId + '_remove', function () {\n                    if (_this.get('_overlays')) {\n                        _this.get('_overlays')[overlayId] = null;\n                        overlay.destroy();\n                    }\n                });\n                return overlay;\n            }\n        })();\n    };\n    GoogleMap.prototype.addPolyline = function (options) {\n        var _this = this;\n        return (function () {\n            if (instanceAvailability(_this) === true) {\n                return getPromise(function (resolve, reject) {\n                    _this._objectInstance.addPolyline(options, function (polyline) {\n                        if (polyline) {\n                            var overlayId_5 = polyline.getId();\n                            var overlay_5 = new Polyline(_this, polyline);\n                            _this.get('_overlays')[overlayId_5] = overlay_5;\n                            polyline.one(overlayId_5 + '_remove', function () {\n                                if (_this.get('_overlays')) {\n                                    _this.get('_overlays')[overlayId_5] = null;\n                                    overlay_5.destroy();\n                                }\n                            });\n                            resolve(overlay_5);\n                        }\n                        else {\n                            reject();\n                        }\n                    });\n                });\n            }\n        })();\n    };\n    GoogleMap.prototype.addPolylineSync = function (options) {\n        var _this = this;\n        return (function () {\n            if (instanceAvailability(_this) === true) {\n                var polyline = _this._objectInstance.addPolyline(options);\n                var overlayId = polyline.getId();\n                var overlay = new Polyline(_this, polyline);\n                _this.get('_overlays')[overlayId] = overlay;\n                polyline.one(overlayId + '_remove', function () {\n                    if (_this.get('_overlays')) {\n                        _this.get('_overlays')[overlayId] = null;\n                        overlay.destroy();\n                    }\n                });\n                return overlay;\n            }\n        })();\n    };\n    GoogleMap.prototype.addTileOverlay = function (options) {\n        var _this = this;\n        return (function () {\n            if (instanceAvailability(_this) === true) {\n                return getPromise(function (resolve, reject) {\n                    _this._objectInstance.addTileOverlay(options, function (tileOverlay) {\n                        if (tileOverlay) {\n                            var overlayId_6 = tileOverlay.getId();\n                            var overlay_6 = new TileOverlay(_this, tileOverlay);\n                            _this.get('_overlays')[overlayId_6] = overlay_6;\n                            tileOverlay.one(overlayId_6 + '_remove', function () {\n                                if (_this.get('_overlays')) {\n                                    _this.get('_overlays')[overlayId_6] = null;\n                                    overlay_6.destroy();\n                                }\n                            });\n                            resolve(overlay_6);\n                        }\n                        else {\n                            reject();\n                        }\n                    });\n                });\n            }\n        })();\n    };\n    GoogleMap.prototype.addTileOverlaySync = function (options) {\n        var _this = this;\n        return (function () {\n            if (instanceAvailability(_this) === true) {\n                var tileOverlay = _this._objectInstance.addTileOverlay(options);\n                var overlayId = tileOverlay.getId();\n                var overlay = new TileOverlay(_this, tileOverlay);\n                _this.get('_overlays')[overlayId] = overlay;\n                tileOverlay.one(overlayId + '_remove', function () {\n                    if (_this.get('_overlays')) {\n                        _this.get('_overlays')[overlayId] = null;\n                        overlay.destroy();\n                    }\n                });\n                return overlay;\n            }\n        })();\n    };\n    GoogleMap.prototype.addGroundOverlay = function (options) {\n        var _this = this;\n        return (function () {\n            if (instanceAvailability(_this) === true) {\n                return getPromise(function (resolve, reject) {\n                    _this._objectInstance.addGroundOverlay(options, function (groundOverlay) {\n                        if (groundOverlay) {\n                            var overlayId_7 = groundOverlay.getId();\n                            var overlay_7 = new GroundOverlay(_this, groundOverlay);\n                            _this.get('_overlays')[overlayId_7] = overlay_7;\n                            groundOverlay.one(overlayId_7 + '_remove', function () {\n                                if (_this.get('_overlays')) {\n                                    _this.get('_overlays')[overlayId_7] = null;\n                                    overlay_7.destroy();\n                                }\n                            });\n                            resolve(overlay_7);\n                        }\n                        else {\n                            reject();\n                        }\n                    });\n                });\n            }\n        })();\n    };\n    GoogleMap.prototype.addGroundOverlaySync = function (options) {\n        var _this = this;\n        return (function () {\n            if (instanceAvailability(_this) === true) {\n                var groundOverlay = _this._objectInstance.addGroundOverlay(options);\n                var overlayId = groundOverlay.getId();\n                var overlay = new GroundOverlay(_this, groundOverlay);\n                _this.get('_overlays')[overlayId] = overlay;\n                groundOverlay.one(overlayId + '_remove', function () {\n                    if (_this.get('_overlays')) {\n                        _this.get('_overlays')[overlayId] = null;\n                        overlay.destroy();\n                    }\n                });\n                return overlay;\n            }\n        })();\n    };\n    GoogleMap.prototype.addKmlOverlay = function (options) {\n        var _this = this;\n        return (function () {\n            if (instanceAvailability(_this) === true) {\n                return getPromise(function (resolve, reject) {\n                    _this._objectInstance.addKmlOverlay(options, function (kmlOverlay) {\n                        if (kmlOverlay) {\n                            var overlayId_8 = kmlOverlay.getId();\n                            var overlay_8 = new KmlOverlay(_this, kmlOverlay);\n                            _this.get('_overlays')[overlayId_8] = overlay_8;\n                            kmlOverlay.one(overlayId_8 + '_remove', function () {\n                                if (_this.get('_overlays')) {\n                                    _this.get('_overlays')[overlayId_8] = null;\n                                    overlay_8.destroy();\n                                }\n                            });\n                            resolve(overlay_8);\n                        }\n                        else {\n                            reject();\n                        }\n                    });\n                });\n            }\n        })();\n    };\n    GoogleMap.prototype.toDataURL = function (options) { return cordovaInstance(this, \"toDataURL\", {}, arguments); };\n    GoogleMap.pluginName = \"GoogleMaps\";\n    GoogleMap.plugin = \"cordova-plugin-googlemaps\";\n    return GoogleMap;\n}(BaseClass));\nexport { GoogleMap };\nvar GroundOverlay = /** @class */ (function (_super) {\n    __extends(GroundOverlay, _super);\n    function GroundOverlay(_map, _objectInstance) {\n        var _this = _super.call(this, _objectInstance) || this;\n        _this._map = _map;\n        return _this;\n    }\n    GroundOverlay.prototype.getId = function () { return cordovaInstance(this, \"getId\", { \"sync\": true }, arguments); };\n    /**\n     * Returns the map instance.\n     * @return {GoogleMap}\n     */\n    GroundOverlay.prototype.getMap = function () {\n        return this._map;\n    };\n    GroundOverlay.prototype.setBounds = function (bounds) { return cordovaInstance(this, \"setBounds\", { \"sync\": true }, arguments); };\n    GroundOverlay.prototype.setBearing = function (bearing) { return cordovaInstance(this, \"setBearing\", { \"sync\": true }, arguments); };\n    GroundOverlay.prototype.getBearing = function () { return cordovaInstance(this, \"getBearing\", { \"sync\": true }, arguments); };\n    GroundOverlay.prototype.setImage = function (imageUrl) { return cordovaInstance(this, \"setImage\", { \"sync\": true }, arguments); };\n    GroundOverlay.prototype.setOpacity = function (opacity) { return cordovaInstance(this, \"setOpacity\", { \"sync\": true }, arguments); };\n    GroundOverlay.prototype.getOpacity = function () { return cordovaInstance(this, \"getOpacity\", { \"sync\": true }, arguments); };\n    GroundOverlay.prototype.setClickable = function (clickable) { return cordovaInstance(this, \"setClickable\", { \"sync\": true }, arguments); };\n    GroundOverlay.prototype.getClickable = function () { return cordovaInstance(this, \"getClickable\", { \"sync\": true }, arguments); };\n    GroundOverlay.prototype.setVisible = function (visible) { return cordovaInstance(this, \"setVisible\", { \"sync\": true }, arguments); };\n    GroundOverlay.prototype.getVisible = function () { return cordovaInstance(this, \"getVisible\", { \"sync\": true }, arguments); };\n    GroundOverlay.prototype.setZIndex = function (index) { return cordovaInstance(this, \"setZIndex\", { \"sync\": true }, arguments); };\n    GroundOverlay.prototype.getZIndex = function () { return cordovaInstance(this, \"getZIndex\", { \"sync\": true }, arguments); };\n    GroundOverlay.prototype.remove = function () { return cordovaInstance(this, \"remove\", {}, arguments); };\n    return GroundOverlay;\n}(BaseClass));\nexport { GroundOverlay };\nvar HtmlInfoWindow = /** @class */ (function (_super) {\n    __extends(HtmlInfoWindow, _super);\n    function HtmlInfoWindow() {\n        return _super.call(this, new (GoogleMaps.getPlugin().HtmlInfoWindow)()) || this;\n    }\n    HtmlInfoWindow.prototype.setBackgroundColor = function (color) { return cordovaInstance(this, \"setBackgroundColor\", {}, arguments); };\n    HtmlInfoWindow.prototype.setContent = function (content, cssOptions) { return cordovaInstance(this, \"setContent\", {}, arguments); };\n    HtmlInfoWindow.prototype.open = function (marker) { return cordovaInstance(this, \"open\", {}, arguments); };\n    HtmlInfoWindow.prototype.close = function () { return cordovaInstance(this, \"close\", {}, arguments); };\n    HtmlInfoWindow.plugin = \"cordova-plugin-googlemaps\";\n    HtmlInfoWindow.pluginName = \"GoogleMaps\";\n    HtmlInfoWindow.pluginRef = \"plugin.google.maps.HtmlInfoWindow\";\n    HtmlInfoWindow.repo = \"\";\n    return HtmlInfoWindow;\n}(BaseClass));\nexport { HtmlInfoWindow };\nvar Marker = /** @class */ (function (_super) {\n    __extends(Marker, _super);\n    function Marker(_map, _objectInstance) {\n        var _this = _super.call(this, _objectInstance) || this;\n        _this._map = _map;\n        return _this;\n    }\n    Marker.prototype.getId = function () { return cordovaInstance(this, \"getId\", { \"sync\": true }, arguments); };\n    /**\n     * Returns the map instance.\n     * @return {GoogleMap}\n     */\n    Marker.prototype.getMap = function () {\n        return this._map;\n    };\n    Marker.prototype.setPosition = function (latLng) { return cordovaInstance(this, \"setPosition\", { \"sync\": true }, arguments); };\n    Marker.prototype.getPosition = function () { return cordovaInstance(this, \"getPosition\", { \"sync\": true }, arguments); };\n    Marker.prototype.showInfoWindow = function () { return cordovaInstance(this, \"showInfoWindow\", { \"sync\": true }, arguments); };\n    Marker.prototype.hideInfoWindow = function () { return cordovaInstance(this, \"hideInfoWindow\", { \"sync\": true }, arguments); };\n    Marker.prototype.setAnimation = function (animation) { return cordovaInstance(this, \"setAnimation\", { \"sync\": true }, arguments); };\n    Marker.prototype.setDisableAutoPan = function (disableAutoPan) { return cordovaInstance(this, \"setDisableAutoPan\", { \"sync\": true }, arguments); };\n    Marker.prototype.setVisible = function (visible) { return cordovaInstance(this, \"setVisible\", { \"sync\": true }, arguments); };\n    Marker.prototype.isVisible = function () { return cordovaInstance(this, \"isVisible\", { \"sync\": true }, arguments); };\n    Marker.prototype.setTitle = function (title) { return cordovaInstance(this, \"setTitle\", { \"sync\": true }, arguments); };\n    Marker.prototype.getTitle = function () { return cordovaInstance(this, \"getTitle\", { \"sync\": true }, arguments); };\n    Marker.prototype.setSnippet = function (snippet) { return cordovaInstance(this, \"setSnippet\", { \"sync\": true }, arguments); };\n    Marker.prototype.getSnippet = function () { return cordovaInstance(this, \"getSnippet\", { \"sync\": true }, arguments); };\n    Marker.prototype.setOpacity = function (alpha) { return cordovaInstance(this, \"setOpacity\", { \"sync\": true }, arguments); };\n    Marker.prototype.getOpacity = function () { return cordovaInstance(this, \"getOpacity\", { \"sync\": true }, arguments); };\n    Marker.prototype.remove = function () { return cordovaInstance(this, \"remove\", {}, arguments); };\n    Marker.prototype.setIconAnchor = function (x, y) { return cordovaInstance(this, \"setIconAnchor\", { \"sync\": true }, arguments); };\n    Marker.prototype.setInfoWindowAnchor = function (x, y) { return cordovaInstance(this, \"setInfoWindowAnchor\", { \"sync\": true }, arguments); };\n    Marker.prototype.isInfoWindowShown = function () { return cordovaInstance(this, \"isInfoWindowShown\", { \"sync\": true }, arguments); };\n    Marker.prototype.setZIndex = function (zIndex) { return cordovaInstance(this, \"setZIndex\", { \"sync\": true }, arguments); };\n    Marker.prototype.getZIndex = function () { return cordovaInstance(this, \"getZIndex\", { \"sync\": true }, arguments); };\n    Marker.prototype.setDraggable = function (draggable) { return cordovaInstance(this, \"setDraggable\", { \"sync\": true }, arguments); };\n    Marker.prototype.isDraggable = function () { return cordovaInstance(this, \"isDraggable\", { \"sync\": true }, arguments); };\n    Marker.prototype.setFlat = function (flat) { return cordovaInstance(this, \"setFlat\", { \"sync\": true }, arguments); };\n    Marker.prototype.setIcon = function (icon) { return cordovaInstance(this, \"setIcon\", { \"sync\": true }, arguments); };\n    Marker.prototype.setRotation = function (rotation) { return cordovaInstance(this, \"setRotation\", { \"sync\": true }, arguments); };\n    Marker.prototype.getRotation = function () { return cordovaInstance(this, \"getRotation\", { \"sync\": true }, arguments); };\n    return Marker;\n}(BaseClass));\nexport { Marker };\nvar MarkerCluster = /** @class */ (function (_super) {\n    __extends(MarkerCluster, _super);\n    function MarkerCluster(_map, _objectInstance) {\n        var _this = _super.call(this, _objectInstance) || this;\n        _this._map = _map;\n        return _this;\n    }\n    MarkerCluster.prototype.getId = function () { return cordovaInstance(this, \"getId\", { \"sync\": true }, arguments); };\n    MarkerCluster.prototype.addMarker = function (marker) { return cordovaInstance(this, \"addMarker\", { \"sync\": true }, arguments); };\n    MarkerCluster.prototype.addMarkers = function (markers) { return cordovaInstance(this, \"addMarkers\", { \"sync\": true }, arguments); };\n    MarkerCluster.prototype.remove = function () { return cordovaInstance(this, \"remove\", {}, arguments); };\n    /**\n     * Returns the map instance.\n     * @return {GoogleMap}\n     */\n    MarkerCluster.prototype.getMap = function () {\n        return this._map;\n    };\n    return MarkerCluster;\n}(BaseClass));\nexport { MarkerCluster };\nvar Polygon = /** @class */ (function (_super) {\n    __extends(Polygon, _super);\n    function Polygon(_map, _objectInstance) {\n        var _this = _super.call(this, _objectInstance) || this;\n        _this._map = _map;\n        return _this;\n    }\n    Polygon.prototype.getId = function () { return cordovaInstance(this, \"getId\", { \"sync\": true }, arguments); };\n    /**\n     * Returns the map instance.\n     * @return {GoogleMap}\n     */\n    Polygon.prototype.getMap = function () {\n        return this._map;\n    };\n    Polygon.prototype.setPoints = function (points) { return cordovaInstance(this, \"setPoints\", { \"sync\": true }, arguments); };\n    /**\n     * Returns an instance of the BaseArrayClass.\n     * You can modify the points.\n     * @return {BaseArrayClass<ILatLng>}\n     */\n    Polygon.prototype.getPoints = function () {\n        return new BaseArrayClass(this._objectInstance.getPoints());\n    };\n    Polygon.prototype.setHoles = function (holes) { return cordovaInstance(this, \"setHoles\", { \"sync\": true }, arguments); };\n    /**\n     * Returns an instance of the BaseArrayClass.\n     * You can modify the holes.\n     * @return {BaseArrayClass<ILatLng[]>}\n     */\n    Polygon.prototype.getHoles = function () {\n        var holes = this._objectInstance.getPoints();\n        var results = new BaseArrayClass();\n        holes.forEach(function (hole) {\n            results.push(hole);\n        });\n        return results;\n    };\n    Polygon.prototype.setFillColor = function (fillColor) { return cordovaInstance(this, \"setFillColor\", { \"sync\": true }, arguments); };\n    Polygon.prototype.getFillColor = function () { return cordovaInstance(this, \"getFillColor\", { \"sync\": true }, arguments); };\n    Polygon.prototype.setStrokeColor = function (strokeColor) { return cordovaInstance(this, \"setStrokeColor\", { \"sync\": true }, arguments); };\n    Polygon.prototype.getStrokeColor = function () { return cordovaInstance(this, \"getStrokeColor\", { \"sync\": true }, arguments); };\n    Polygon.prototype.setClickable = function (clickable) { return cordovaInstance(this, \"setClickable\", { \"sync\": true }, arguments); };\n    Polygon.prototype.getClickable = function () { return cordovaInstance(this, \"getClickable\", { \"sync\": true }, arguments); };\n    Polygon.prototype.setVisible = function (visible) { return cordovaInstance(this, \"setVisible\", { \"sync\": true }, arguments); };\n    Polygon.prototype.getVisible = function () { return cordovaInstance(this, \"getVisible\", { \"sync\": true }, arguments); };\n    Polygon.prototype.setZIndex = function (zIndex) { return cordovaInstance(this, \"setZIndex\", { \"sync\": true }, arguments); };\n    Polygon.prototype.getZIndex = function () { return cordovaInstance(this, \"getZIndex\", { \"sync\": true }, arguments); };\n    Polygon.prototype.remove = function () { return cordovaInstance(this, \"remove\", {}, arguments); };\n    Polygon.prototype.setStrokeWidth = function (strokeWidth) { return cordovaInstance(this, \"setStrokeWidth\", { \"sync\": true }, arguments); };\n    Polygon.prototype.getStrokeWidth = function () { return cordovaInstance(this, \"getStrokeWidth\", { \"sync\": true }, arguments); };\n    Polygon.prototype.setGeodesic = function (geodesic) { return cordovaInstance(this, \"setGeodesic\", { \"sync\": true }, arguments); };\n    Polygon.prototype.getGeodesic = function () { return cordovaInstance(this, \"getGeodesic\", { \"sync\": true }, arguments); };\n    return Polygon;\n}(BaseClass));\nexport { Polygon };\nvar Polyline = /** @class */ (function (_super) {\n    __extends(Polyline, _super);\n    function Polyline(_map, _objectInstance) {\n        var _this = _super.call(this, _objectInstance) || this;\n        _this._map = _map;\n        return _this;\n    }\n    Polyline.prototype.getId = function () { return cordovaInstance(this, \"getId\", { \"sync\": true }, arguments); };\n    /**\n     * Returns the map instance.\n     * @return {GoogleMap}\n     */\n    Polyline.prototype.getMap = function () {\n        return this._map;\n    };\n    Polyline.prototype.setPoints = function (points) { return cordovaInstance(this, \"setPoints\", { \"sync\": true }, arguments); };\n    /**\n     * Returns an instance of the BaseArrayClass\n     * You can modify the points.\n     * @return {BaseArrayClass<ILatLng>}\n     */\n    Polyline.prototype.getPoints = function () {\n        return new BaseArrayClass(this._objectInstance.getPoints());\n    };\n    Polyline.prototype.setGeoDesic = function (geoDesic) { return cordovaInstance(this, \"setGeoDesic\", { \"sync\": true }, arguments); };\n    Polyline.prototype.getGeodesic = function () { return cordovaInstance(this, \"getGeodesic\", { \"sync\": true }, arguments); };\n    Polyline.prototype.setVisible = function (visible) { return cordovaInstance(this, \"setVisible\", { \"sync\": true }, arguments); };\n    Polyline.prototype.getVisible = function () { return cordovaInstance(this, \"getVisible\", { \"sync\": true }, arguments); };\n    Polyline.prototype.setClickable = function (clickable) { return cordovaInstance(this, \"setClickable\", { \"sync\": true }, arguments); };\n    Polyline.prototype.getClickable = function () { return cordovaInstance(this, \"getClickable\", { \"sync\": true }, arguments); };\n    Polyline.prototype.setStrokeColor = function (strokeColor) { return cordovaInstance(this, \"setStrokeColor\", { \"sync\": true }, arguments); };\n    Polyline.prototype.getStrokeColor = function () { return cordovaInstance(this, \"getStrokeColor\", { \"sync\": true }, arguments); };\n    Polyline.prototype.setStrokeWidth = function (strokeWidth) { return cordovaInstance(this, \"setStrokeWidth\", { \"sync\": true }, arguments); };\n    Polyline.prototype.getStrokeWidth = function () { return cordovaInstance(this, \"getStrokeWidth\", { \"sync\": true }, arguments); };\n    Polyline.prototype.setZIndex = function (index) { return cordovaInstance(this, \"setZIndex\", { \"sync\": true }, arguments); };\n    Polyline.prototype.getZIndex = function () { return cordovaInstance(this, \"getZIndex\", { \"sync\": true }, arguments); };\n    Polyline.prototype.remove = function () { return cordovaInstance(this, \"remove\", {}, arguments); };\n    return Polyline;\n}(BaseClass));\nexport { Polyline };\nvar TileOverlay = /** @class */ (function (_super) {\n    __extends(TileOverlay, _super);\n    function TileOverlay(_map, _objectInstance) {\n        var _this = _super.call(this, _objectInstance) || this;\n        _this._map = _map;\n        return _this;\n    }\n    TileOverlay.prototype.getId = function () { return cordovaInstance(this, \"getId\", { \"sync\": true }, arguments); };\n    /**\n     * Returns the map instance.\n     * @return {GoogleMap}\n     */\n    TileOverlay.prototype.getMap = function () {\n        return this._map;\n    };\n    TileOverlay.prototype.setFadeIn = function (fadeIn) { return cordovaInstance(this, \"setFadeIn\", { \"sync\": true }, arguments); };\n    TileOverlay.prototype.getFadeIn = function () { return cordovaInstance(this, \"getFadeIn\", { \"sync\": true }, arguments); };\n    TileOverlay.prototype.setZIndex = function (zIndex) { return cordovaInstance(this, \"setZIndex\", { \"sync\": true }, arguments); };\n    TileOverlay.prototype.getZIndex = function () { return cordovaInstance(this, \"getZIndex\", { \"sync\": true }, arguments); };\n    TileOverlay.prototype.setOpacity = function (opacity) { return cordovaInstance(this, \"setOpacity\", { \"sync\": true }, arguments); };\n    TileOverlay.prototype.getOpacity = function () { return cordovaInstance(this, \"getOpacity\", { \"sync\": true }, arguments); };\n    TileOverlay.prototype.setVisible = function (visible) { return cordovaInstance(this, \"setVisible\", { \"sync\": true }, arguments); };\n    TileOverlay.prototype.getVisible = function () { return cordovaInstance(this, \"getVisible\", { \"sync\": true }, arguments); };\n    TileOverlay.prototype.getTileSize = function () { return cordovaInstance(this, \"getTileSize\", { \"sync\": true }, arguments); };\n    TileOverlay.prototype.remove = function () { return cordovaInstance(this, \"remove\", {}, arguments); };\n    return TileOverlay;\n}(BaseClass));\nexport { TileOverlay };\nvar KmlOverlay = /** @class */ (function (_super) {\n    __extends(KmlOverlay, _super);\n    function KmlOverlay(_map, _objectInstance) {\n        var _this = _super.call(this, _objectInstance) || this;\n        _this._map = _map;\n        Object.defineProperty(self, 'camera', {\n            value: _this._objectInstance.camera,\n            writable: false\n        });\n        Object.defineProperty(self, 'kmlData', {\n            value: _this._objectInstance.kmlData,\n            writable: false\n        });\n        return _this;\n    }\n    KmlOverlay.prototype.getDefaultViewport = function () { return cordovaInstance(this, \"getDefaultViewport\", { \"sync\": true }, arguments); };\n    KmlOverlay.prototype.getId = function () { return cordovaInstance(this, \"getId\", { \"sync\": true }, arguments); };\n    /**\n     * Returns the map instance.\n     * @return {GoogleMap}\n     */\n    KmlOverlay.prototype.getMap = function () { return this._map; };\n    KmlOverlay.prototype.setVisible = function (visible) { return cordovaInstance(this, \"setVisible\", { \"sync\": true }, arguments); };\n    KmlOverlay.prototype.getVisible = function () { return cordovaInstance(this, \"getVisible\", { \"sync\": true }, arguments); };\n    KmlOverlay.prototype.setClickable = function (clickable) { return cordovaInstance(this, \"setClickable\", { \"sync\": true }, arguments); };\n    KmlOverlay.prototype.getClickable = function () { return cordovaInstance(this, \"getClickable\", { \"sync\": true }, arguments); };\n    KmlOverlay.prototype.remove = function () { return cordovaInstance(this, \"remove\", {}, arguments); };\n    return KmlOverlay;\n}(BaseClass));\nexport { KmlOverlay };\n//# sourceMappingURL=data:application/json;base64,","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { JourneyPlannerPage } from './journey-planner.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: JourneyPlannerPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  declarations: [JourneyPlannerPage]\r\n})\r\nexport class JourneyPlannerPageModule {}\r\n","module.exports = \"<<ion-header>\\r\\n  <ion-toolbar>\\r\\n    <ion-buttons slot=\\\"start\\\">\\r\\n      <ion-menu-button></ion-menu-button>\\r\\n    </ion-buttons>\\r\\n    <ion-title>\\r\\n      Going My Way/RideShare\\r\\n    </ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content padding>\\r\\n<div id=\\\"myMap\\\"></div>\\r\\n<ion-input [(ngModel)]=\\\"search_address\\\"  placeholder=\\\"\\\">Search location:</ion-input><ion-button (click)=\\\"search(search_address)\\\">search</ion-button>\\r\\n<ion-button (click)=\\\"addJourneyToDatabase()\\\">Add This Journey!</ion-button>\\r\\n</ion-content>\"","module.exports = \"#myMap {\\n  height: 90%;\\n  margin: 2%;\\n  border-radius: 5%; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvam91cm5leS1wbGFubmVyL0M6XFxVc2Vyc1xcQ29ybWFjXFxEZXNrdG9wXFxQcm9mUHJhY3RpY2VcXEdvaW5nTXlXYXkvc3JjXFxhcHBcXGpvdXJuZXktcGxhbm5lclxcam91cm5leS1wbGFubmVyLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUVJLFdBQVc7RUFDWCxVQUFTO0VBQ1QsaUJBQWlCLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9qb3VybmV5LXBsYW5uZXIvam91cm5leS1wbGFubmVyLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIiNteU1hcFxyXG57XHJcbiAgICBoZWlnaHQ6IDkwJTtcclxuICAgIG1hcmdpbjoyJTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDUlO1xyXG59Il19 */\"","import {\r\n  GoogleMaps,\r\n  GoogleMap,\r\n  GoogleMapsEvent,\r\n  GoogleMapOptions,\r\n  CameraPosition,\r\n  MarkerOptions,\r\n  Marker,\r\n  Environment,\r\n  ILatLng\r\n} from '@ionic-native/google-maps';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Geocoder, GeocoderResult } from '@ionic-native/google-maps/ngx';\r\nimport { JourneyService } from 'src/app/journey.service';\r\n\r\n@Component({\r\n  selector: 'app-journey-planner',\r\n  templateUrl: './journey-planner.page.html',\r\n  styleUrls: ['./journey-planner.page.scss'],\r\n})\r\nexport class JourneyPlannerPage implements OnInit {\r\n  \r\n  map: GoogleMap;\r\n  startJourney:Marker;\r\n  endJourney:Marker;\r\n  start:ILatLng;\r\n  end:ILatLng;\r\n\r\n  constructor(private router:Router, private journeyService:JourneyService) { }\r\n\r\n  ngOnInit() {\r\n    this.loadMap();\r\n  }\r\n\r\n  loadMap() {\r\n    let mapOptions: GoogleMapOptions = {\r\n      camera: {  \r\n        target: {\r\n          lat: 53.270962,\r\n          lng: -9.062691\r\n        },\r\n        zoom: 5,\r\n        tilt: 30\r\n      }\r\n    };\r\n\r\n    this.map = GoogleMaps.create('myMap', mapOptions);\r\n  }//loadMap()\r\n\r\n  visitMapPage()\r\n  {\r\n    this.router.navigate(['map']);\r\n  }\r\n  navigateJourneyPlanner(){\r\n   this.router.navigate(['journey-planner']);\r\n  }\r\n  search(location:string)\r\n  {\r\n    this.map.clear();\r\n    console.log(location)\r\n    Geocoder.geocode\r\n      ({\r\n        \"address\":location\r\n      })\r\n      .then((results: GeocoderResult[])=>\r\n      {\r\n        console.log(results[0].position); \r\n        this.map.setCameraTarget(results[0].position);\r\n        this.map.setCameraZoom(10);    \r\n        let mark:number = results[0].position.lat;\r\n        this.endJourney = this.map.addMarkerSync({\r\n          title: \"End Journey\",\r\n          icon: 'Red',\r\n          position: results[0].position,\r\n          draggable: true,\r\n        });\r\n\r\n        this.startJourney = this.map.addMarkerSync({\r\n          title: \"Start Journey\",\r\n          icon: 'Blue',\r\n          position: results[0].position,\r\n          draggable: true,\r\n        });\r\n      })\r\n  }\r\n  addJourneyToDatabase()\r\n  {\r\n    if(!this.journeyService.getUser())\r\n    {\r\n      alert(\"Please Log in to add a Journey\")\r\n    }\r\n    else\r\n    {\r\n      let user:any = this.journeyService.getUser();\r\n      let userName:string = user.email\r\n      this.start = this.startJourney.getPosition();\r\n      this.end = this.endJourney.getPosition(); \r\n      this.showPosition(this.start.lng,this.start.lat,this.end.lng,this.end.lat,userName)\r\n    }\r\n  }\r\n\r\n  showPosition(x1: number, y1: number, x2: number, y2: number, user:string) \r\n  {\r\n    this.journeyService.sendJourney(x1,y1,x2,y2,user);\r\n    alert(\"Journey added\");\r\n    this.router.navigate(['home']);\r\n  }\r\n}"],"sourceRoot":""}